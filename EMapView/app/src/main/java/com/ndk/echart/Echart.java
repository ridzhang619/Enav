// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echart.proto

package com.ndk.echart;

public final class Echart {
  private Echart() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code echart.EChart_MsgType}
   */
  public enum EChart_MsgType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *海图引擎初始化
     * </pre>
     *
     * <code>MSG_INVOKE_INIT = 0;</code>
     */
    MSG_INVOKE_INIT(0),
    /**
     * <pre>
     *海图引擎初始化的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_INIT = 1;</code>
     */
    MSG_RESULT_INIT(1),
    /**
     * <pre>
     *海图引擎反初始化
     * </pre>
     *
     * <code>MSG_INVOKE_UNINIT = 2;</code>
     */
    MSG_INVOKE_UNINIT(2),
    /**
     * <pre>
     *海图引擎反初始化的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_UNINIT = 3;</code>
     */
    MSG_RESULT_UNINIT(3),
    /**
     * <pre>
     *-----------------------MapView---------------------------
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_CREATE = 1000;</code>
     */
    MSG_INVOKE_MAPVIEW_CREATE(1000),
    /**
     * <pre>
     *创建海图显示视图的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_CREATE = 1001;</code>
     */
    MSG_RESULT_MAPVIEW_CREATE(1001),
    /**
     * <pre>
     *销毁创建的显示视图
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_DESTROY = 1010;</code>
     */
    MSG_INVOKE_MAPVIEW_DESTROY(1010),
    /**
     * <pre>
     *销毁创建的显示视图的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_DESTROY = 1011;</code>
     */
    MSG_RESULT_MAPVIEW_DESTROY(1011),
    /**
     * <pre>
     *获取视图比例尺
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_SCALE = 1020;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_SCALE(1020),
    /**
     * <pre>
     *获取视图比例尺的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_SCALE = 1021;</code>
     */
    MSG_RESULT_MAPVIEW_GET_SCALE(1021),
    /**
     * <pre>
     *设置视图比例尺
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCALE = 1030;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_SCALE(1030),
    /**
     * <pre>
     *设置视图比例尺的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCALE = 1031;</code>
     */
    MSG_RESULT_MAPVIEW_SET_SCALE(1031),
    /**
     * <pre>
     *设置视图缩放倍率
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR = 1040;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR(1040),
    /**
     * <pre>
     *设置视图缩放倍率的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR = 1041;</code>
     */
    MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR(1041),
    /**
     * <pre>
     *获取视图参数dpi(每英寸像素数)
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_DPI = 1050;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_DPI(1050),
    /**
     * <pre>
     *获取视图参数dpi的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_DPI = 1051;</code>
     */
    MSG_RESULT_MAPVIEW_GET_DPI(1051),
    /**
     * <pre>
     *设置视图参数dpi
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_DPI = 1060;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_DPI(1060),
    /**
     * <pre>
     *设置视图参数dpi的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_DPI = 1061;</code>
     */
    MSG_RESULT_MAPVIEW_SET_DPI(1061),
    /**
     * <pre>
     *获取显示视图大小
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE = 1070;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE(1070),
    /**
     * <pre>
     *获取显示视图大小的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_SCREEN_SIZE = 1071;</code>
     */
    MSG_RESULT_MAPVIEW_GET_SCREEN_SIZE(1071),
    /**
     * <pre>
     *设置显示视图大小
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE = 1080;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE(1080),
    /**
     * <pre>
     *设置显示视图大小的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE = 1081;</code>
     */
    MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE(1081),
    /**
     * <pre>
     *以指定的地理坐标做为视图中心
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_CENTER = 1090;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_CENTER(1090),
    /**
     * <pre>
     *以指定的地理坐标作为视图中心的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_CENTER = 1091;</code>
     */
    MSG_RESULT_MAPVIEW_SET_CENTER(1091),
    /**
     * <pre>
     *将视图移动指定的像素距离
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_MOVE = 1100;</code>
     */
    MSG_INVOKE_MAPVIEW_MOVE(1100),
    /**
     * <pre>
     *将视图移动指定的像素距离的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_MOVE = 1101;</code>
     */
    MSG_RESULT_MAPVIEW_MOVE(1101),
    /**
     * <pre>
     *更新视图所有图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE = 1110;</code>
     */
    MSG_INVOKE_MAPVIEW_UPDATE(1110),
    /**
     * <pre>
     *更新视图的所有图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE = 1111;</code>
     */
    MSG_RESULT_MAPVIEW_UPDATE(1111),
    /**
     * <pre>
     *绘制所有图层，注意：必须在非主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_DRAW = 1120;</code>
     */
    MSG_INVOKE_MAPVIEW_DRAW(1120),
    /**
     * <pre>
     *绘制所有图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_DRAW = 1121;</code>
     */
    MSG_RESULT_MAPVIEW_DRAW(1121),
    /**
     * <pre>
     *获取海图图层的id
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER = 1130;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER(1130),
    /**
     * <pre>
     *获取海图图层的id的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_BASEMAP_LAYER = 1131;</code>
     */
    MSG_RESULT_MAPVIEW_GET_BASEMAP_LAYER(1131),
    /**
     * <pre>
     *获取动态船舶图层id
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER = 1140;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER(1140),
    /**
     * <pre>
     *获取动态船舶图层id的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_VESSEL_LAYER = 1141;</code>
     */
    MSG_RESULT_MAPVIEW_GET_VESSEL_LAYER(1141),
    /**
     * <pre>
     *获取可持久化图层(即自定义图层的集合)
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER = 1150;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER(1150),
    /**
     * <pre>
     *获取可持久化图层(即自定义图层的集合)的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER = 1151;</code>
     */
    MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER(1151),
    /**
     * <pre>
     *更新动态船舶图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER = 1160;</code>
     */
    MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER(1160),
    /**
     * <pre>
     *更新动态船舶图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER = 1161;</code>
     */
    MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER(1161),
    /**
     * <pre>
     *更新可持久化图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER = 1170;</code>
     */
    MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER(1170),
    /**
     * <pre>
     *更新可持久化图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER = 1171;</code>
     */
    MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER(1171),
    /**
     * <pre>
     *获取图幅顺时针旋转的角度
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_ROTATION = 1180;</code>
     */
    MSG_INVOKE_MAPVIEW_GET_ROTATION(1180),
    /**
     * <pre>
     *获取图幅顺时针旋转的角度的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_ROTATION = 1181;</code>
     */
    MSG_RESULT_MAPVIEW_GET_ROTATION(1181),
    /**
     * <pre>
     *将图幅顺时针旋转
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_ROTATION = 1190;</code>
     */
    MSG_INVOKE_MAPVIEW_SET_ROTATION(1190),
    /**
     * <pre>
     *将图幅顺时针旋转的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_ROTATION = 1191;</code>
     */
    MSG_RESULT_MAPVIEW_SET_ROTATION(1191),
    /**
     * <pre>
     *-----------------------BaseMapLayer---------------------------
     * </pre>
     *
     * <code>MSG_INVOKE_BPLAYER_OBJECT_IS_VISIBLE = 2000;</code>
     */
    MSG_INVOKE_BPLAYER_OBJECT_IS_VISIBLE(2000),
    /**
     * <pre>
     *海图图层物标是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_BPLAYER_OBJECT_IS_VISIBLE = 2001;</code>
     */
    MSG_RESULT_BPLAYER_OBJECT_IS_VISIBLE(2001),
    /**
     * <pre>
     *设置海图图层物标的可见性
     * </pre>
     *
     * <code>MSG_INVOKE_BPLAYER_OBJECT_SET_VISIBLE = 2010;</code>
     */
    MSG_INVOKE_BPLAYER_OBJECT_SET_VISIBLE(2010),
    /**
     * <pre>
     *设置海图图层物标的可见性的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_BPLAYER_OBJECT_SET_VISIBLE = 2011;</code>
     */
    MSG_RESULT_BPLAYER_OBJECT_SET_VISIBLE(2011),
    /**
     * <pre>
     *-----------------------VesselLayer---------------------------		
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_IS_VISIBLE = 3000;</code>
     */
    MSG_INVOKE_VLAYER_IS_VISIBLE(3000),
    /**
     * <pre>
     *动态船舶图层是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_IS_VISIBLE = 3001;</code>
     */
    MSG_RESULT_VLAYER_IS_VISIBLE(3001),
    /**
     * <pre>
     *设置动态船舶图层是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_VISIBLE = 3010;</code>
     */
    MSG_INVOKE_VLAYER_SET_VISIBLE(3010),
    /**
     * <pre>
     *设置动态船舶图层是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_VISIBLE = 3011;</code>
     */
    MSG_RESULT_VLAYER_SET_VISIBLE(3011),
    /**
     * <pre>
     *船舶轨迹是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_IS_TRACK_VISIBLE = 3020;</code>
     */
    MSG_INVOKE_VLAYER_IS_TRACK_VISIBLE(3020),
    /**
     * <pre>
     *船舶轨迹是否可见的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_IS_TRACK_VISIBLE = 3021;</code>
     */
    MSG_RESULT_VLAYER_IS_TRACK_VISIBLE(3021),
    /**
     * <pre>
     *设置船舶轨迹是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_TRACK_VISIBLE = 3030;</code>
     */
    MSG_INVOKE_VLAYER_SET_TRACK_VISIBLE(3030),
    /**
     * <pre>
     *设置船舶轨迹是否可见的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_TRACK_VISIBLE = 3031;</code>
     */
    MSG_RESULT_VLAYER_SET_TRACK_VISIBLE(3031),
    /**
     * <pre>
     *获取船舶轨迹的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_TRACK_INTERVAL = 3040;</code>
     */
    MSG_INVOKE_VLAYER_GET_TRACK_INTERVAL(3040),
    /**
     * <pre>
     *获取船舶轨迹的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_TRACK_INTERVAL = 3041;</code>
     */
    MSG_RESULT_VLAYER_GET_TRACK_INTERVAL(3041),
    /**
     * <pre>
     *设置船舶轨迹的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_TRACK_INTERVAL = 3050;</code>
     */
    MSG_INVOKE_VLAYER_SET_TRACK_INTERVAL(3050),
    /**
     * <pre>
     *设置船舶轨迹的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_TRACK_INTERVAL = 3051;</code>
     */
    MSG_RESULT_VLAYER_SET_TRACK_INTERVAL(3051),
    /**
     * <pre>
     *获取船舶信号丢失的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_SIGNAL_LOST_INTERVAL = 3060;</code>
     */
    MSG_INVOKE_VLAYER_GET_SIGNAL_LOST_INTERVAL(3060),
    /**
     * <pre>
     *获取船舶信号丢失的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_SIGNAL_LOST_INTERVAL = 3061;</code>
     */
    MSG_RESULT_VLAYER_GET_SIGNAL_LOST_INTERVAL(3061),
    /**
     * <pre>
     *设置船舶信号丢失的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_SIGNAL_LOST_INTERVAL = 3070;</code>
     */
    MSG_INVOKE_VLAYER_SET_SIGNAL_LOST_INTERVAL(3070),
    /**
     * <pre>
     *设置船舶信号丢失的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_SIGNAL_LOST_INTERVAL = 3071;</code>
     */
    MSG_RESULT_VLAYER_SET_SIGNAL_LOST_INTERVAL(3071),
    /**
     * <pre>
     *获取船舶移除显示的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_REMOVE_INTERVAL = 3080;</code>
     */
    MSG_INVOKE_VLAYER_GET_REMOVE_INTERVAL(3080),
    /**
     * <pre>
     *获取船舶移除显示的间隔时间的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_REMVOE_INTERVAL = 3081;</code>
     */
    MSG_RESULT_VLAYER_GET_REMVOE_INTERVAL(3081),
    /**
     * <pre>
     *设置船舶移除显示的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_REMOVE_INTERVAL = 3090;</code>
     */
    MSG_INVOKE_VLAYER_SET_REMOVE_INTERVAL(3090),
    /**
     * <pre>
     *设置船舶移除显示的间隔时间的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_REMVOE_INTERVAL = 3091;</code>
     */
    MSG_RESULT_VLAYER_SET_REMVOE_INTERVAL(3091),
    /**
     * <pre>
     *更新船舶位置信息
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_UPDATE_VESSELS_POSITION_REPORT = 3100;</code>
     */
    MSG_INVOKE_VLAYER_UPDATE_VESSELS_POSITION_REPORT(3100),
    /**
     * <pre>
     *更新船舶位置信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_UPDATE_VESSELS_POSITION_REPORT = 3101;</code>
     */
    MSG_RESULT_VLAYER_UPDATE_VESSELS_POSITION_REPORT(3101),
    /**
     * <pre>
     *更新船舶静态及航行信息
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT = 3110;</code>
     */
    MSG_INVOKE_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT(3110),
    /**
     * <pre>
     *更新船舶静态及航行信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT = 3111;</code>
     */
    MSG_RESULT_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT(3111),
    /**
     * <pre>
     *获取设置的本船的MMSI
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_OWN_MMSI = 3120;</code>
     */
    MSG_INVOKE_VLAYER_GET_OWN_MMSI(3120),
    /**
     * <pre>
     *获取设置的本船的MMSI的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_OWN_MMSI = 3121;</code>
     */
    MSG_RESULT_VLAYER_GET_OWN_MMSI(3121),
    /**
     * <pre>
     *设置本船的MMSI
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_OWN_MMSI = 3130;</code>
     */
    MSG_INVOKE_VLAYER_SET_OWN_MMSI(3130),
    /**
     * <pre>
     *设置本船的MMSI的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_OWN_MMSI = 3131;</code>
     */
    MSG_RESULT_VLAYER_SET_OWN_MMSI(3131),
    /**
     * <pre>
     *------------------------PersistableLayer---------------------------			
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_CREATE_SUBLAYER = 4000;</code>
     */
    MSG_INVOKE_PLAYER_CREATE_SUBLAYER(4000),
    /**
     * <pre>
     *在内存中创建自定义图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_CREATE_SUBLAYER = 4001;</code>
     */
    MSG_RESULT_PLAYER_CREATE_SUBLAYER(4001),
    /**
     * <pre>
     *销毁内存中创建的或已加载的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DESTROY_SUBLAYER = 4010;</code>
     */
    MSG_INVOKE_PLAYER_DESTROY_SUBLAYER(4010),
    /**
     * <pre>
     *销毁内存中创建的或已加载的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DESTROY_SUBLAYER = 4011;</code>
     */
    MSG_RESULT_PLAYER_DESTROY_SUBLAYER(4011),
    /**
     * <pre>
     *从持久层删除(内存中若已加载仍保留)已保存的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_REMOVE_SUBLAYER = 4020;</code>
     */
    MSG_INVOKE_PLAYER_REMOVE_SUBLAYER(4020),
    /**
     * <pre>
     *从持久层删除(内存中若已加载仍保留)已保存的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_REMOVE_SUBLAYER = 4021;</code>
     */
    MSG_RESULT_PLAYER_REMOVE_SUBLAYER(4021),
    /**
     * <pre>
     *将内存中的自定义图层保存至文件
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SAVE_SUBLAYER = 4030;</code>
     */
    MSG_INVOKE_PLAYER_SAVE_SUBLAYER(4030),
    /**
     * <pre>
     *将内存中的自定义图层保存至文件的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SAVE_SUBLAYER = 4031;</code>
     */
    MSG_RESULT_PLAYER_SAVE_SUBLAYER(4031),
    /**
     * <pre>
     *获取已保存的所有自定义图层的信息
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_INFO = 4040;</code>
     */
    MSG_INVOKE_PLAYER_GET_SUBLAYERS_INFO(4040),
    /**
     * <pre>
     *获取已保存的所有自定义图层的信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLAYERS_INFO = 4041;</code>
     */
    MSG_RESULT_PLAYER_GET_SUBLAYERS_INFO(4041),
    /**
     * <pre>
     *获取内存中自定义图层的数量
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_COUNT = 4050;</code>
     */
    MSG_INVOKE_PLAYER_GET_SUBLAYERS_COUNT(4050),
    /**
     * <pre>
     *获取内存中自定义图层的数量的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLSYERS_COUNT = 4051;</code>
     */
    MSG_RESULT_PLAYER_GET_SUBLSYERS_COUNT(4051),
    /**
     * <pre>
     *设置自定义图层的渲染顺序，0为最先渲染，Count-1为最后渲染
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_SUBLAYER_ORDER = 4060;</code>
     */
    MSG_INVOKE_PLAYER_SET_SUBLAYER_ORDER(4060),
    /**
     * <pre>
     *设置自定义图层的渲染顺序的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_SUBLAYER_ORDER = 4061;</code>
     */
    MSG_RESULT_PLAYER_SET_SUBLAYER_ORDER(4061),
    /**
     * <pre>
     *获取自定义图层的渲染顺序
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_ORDER = 4070;</code>
     */
    MSG_INVOKE_PLAYER_GET_SUBLAYERS_ORDER(4070),
    /**
     * <pre>
     *获取自定义图层的渲染顺序的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLAYERS_ORDER = 4071;</code>
     */
    MSG_RESULT_PLAYER_GET_SUBLAYERS_ORDER(4071),
    /**
     * <pre>
     *设置最上层(即最后渲染)的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_TOP_SUBLAYER = 4080;</code>
     */
    MSG_INVOKE_PLAYER_SET_TOP_SUBLAYER(4080),
    /**
     * <pre>
     *设置最上层(即最后渲染)的自定义图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_TOP_SUBLAYER = 4081;</code>
     */
    MSG_RESULT_PLAYER_SET_TOP_SUBLAYER(4081),
    /**
     * <pre>
     *获取最上层(即最后渲染)的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_TOP_SUBLAYER = 4090;</code>
     */
    MSG_INVOKE_PLAYER_GET_TOP_SUBLAYER(4090),
    /**
     * <pre>
     *获取最上层(即最后渲染)的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_TOP_SUBLAYER = 4091;</code>
     */
    MSG_RESULT_PLAYER_GET_TOP_SUBLAYER(4091),
    /**
     * <pre>
     *开始在指定的自定义图层上绘制图元
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_DRAW = 4100;</code>
     */
    MSG_INVOKE_PLAYER_BEGIN_DRAW(4100),
    /**
     * <pre>
     *开始在指定的自定义图层上绘制图元的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_DRAW = 4101;</code>
     */
    MSG_RESULT_PLAYER_BEGIN_DRAW(4101),
    /**
     * <pre>
     *结束在指定的自定义图层上绘制图元
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_DRAW = 4110;</code>
     */
    MSG_INVOKE_PLAYER_END_DRAW(4110),
    /**
     * <pre>
     *结束在指定的自定义图层上绘制图元的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_DRAW = 4111;</code>
     */
    MSG_RESULT_PLAYER_END_DRAW(4111),
    /**
     * <pre>
     *设置画笔属性
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_PEN = 4120;</code>
     */
    MSG_INVOKE_PLAYER_SET_PEN(4120),
    /**
     * <pre>
     *设置画笔属性的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_PEN = 4121;</code>
     */
    MSG_RESULT_PLAYER_SET_PEN(4121),
    /**
     * <pre>
     *从当前位置移动指定位置
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_MOVE_TO = 4130;</code>
     */
    MSG_INVOKE_PLAYER_MOVE_TO(4130),
    /**
     * <pre>
     *从当前位置移动指定位置的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_MOVE_TO = 4131;</code>
     */
    MSG_RESULT_PLAYER_MOVE_TO(4131),
    /**
     * <pre>
     *以当前位置为圆心画圆
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DRAW_CIRCLE = 4140;</code>
     */
    MSG_INVOKE_PLAYER_DRAW_CIRCLE(4140),
    /**
     * <pre>
     *以当前位置为圆心画圆的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DRAW_CIRCLE = 4141;</code>
     */
    MSG_RESULT_PLAYER_DRAW_CIRCLE(4141),
    /**
     * <pre>
     *以当前位置为圆心，用当前画笔颜色填充圆
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_FILL_CIRCLE = 4150;</code>
     */
    MSG_INVOKE_PLAYER_FILL_CIRCLE(4150),
    /**
     * <pre>
     *以当前位置为圆心，用当前画笔颜色填充圆的返回结果			
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_FILL_CIRCLE = 4151;</code>
     */
    MSG_RESULT_PLAYER_FILL_CIRCLE(4151),
    /**
     * <pre>
     *在当前位置输出文本
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SHOW_TEXT = 4160;</code>
     */
    MSG_INVOKE_PLAYER_SHOW_TEXT(4160),
    /**
     * <pre>
     *在当前位置输出文本的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SHOW_TEXT = 4161;</code>
     */
    MSG_RESULT_PLAYER_SHOW_TEXT(4161),
    /**
     * <pre>
     *在当前位置显示png图片
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DRAW_PNG = 4170;</code>
     */
    MSG_INVOKE_PLAYER_DRAW_PNG(4170),
    /**
     * <pre>
     *在当前位置显示png图片的而返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DRAW_PNG = 4171;</code>
     */
    MSG_RESULT_PLAYER_DRAW_PNG(4171),
    /**
     * <pre>
     *开始画多边形，注意：一旦开始后，必须结束才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_POLYGON = 4180;</code>
     */
    MSG_INVOKE_PLAYER_BEGIN_POLYGON(4180),
    /**
     * <pre>
     *开始画多边形的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_POLYGON = 4181;</code>
     */
    MSG_RESULT_PLAYER_BEGIN_POLYGON(4181),
    /**
     * <pre>
     *结束画多边形，结束后才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_POLYGON = 4190;</code>
     */
    MSG_INVOKE_PLAYER_END_POLYGON(4190),
    /**
     * <pre>
     *结束画多边形的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_POLYGON = 4191;</code>
     */
    MSG_RESULT_PLAYER_END_POLYGON(4191),
    /**
     * <pre>
     *画多边形的一条边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYGON_LINE_TO = 4200;</code>
     */
    MSG_INVOKE_PLAYER_POLYGON_LINE_TO(4200),
    /**
     * <pre>
     *画多边形的一条边的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYGON_LINE_TO = 4201;</code>
     */
    MSG_RESULT_PLAYER_POLYGON_LINE_TO(4201),
    /**
     * <pre>
     *画多边形的移动边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYGON_MOVE_TO = 4210;</code>
     */
    MSG_INVOKE_PLAYER_POLYGON_MOVE_TO(4210),
    /**
     * <pre>
     *画多边形的移动边的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYGON_MOVE_TO = 4211;</code>
     */
    MSG_RESULT_PLAYER_POLYGON_MOVE_TO(4211),
    /**
     * <pre>
     *开始画折线，注意：一旦开始后，必须结束才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_POLYLINE = 4220;</code>
     */
    MSG_INVOKE_PLAYER_BEGIN_POLYLINE(4220),
    /**
     * <pre>
     *开始画折线的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_POLYLINE = 4221;</code>
     */
    MSG_RESULT_PLAYER_BEGIN_POLYLINE(4221),
    /**
     * <pre>
     *结束画折线，结束后才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_POLYLINE = 4230;</code>
     */
    MSG_INVOKE_PLAYER_END_POLYLINE(4230),
    /**
     * <pre>
     *结束画折线的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_POLYLINE = 4231;</code>
     */
    MSG_RESULT_PLAYER_END_POLYLINE(4231),
    /**
     * <pre>
     *画一条折线
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYLINE_LINE_TO = 4240;</code>
     */
    MSG_INVOKE_PLAYER_POLYLINE_LINE_TO(4240),
    /**
     * <pre>
     *画一条折线的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYLINE_LINE_TO = 4241;</code>
     */
    MSG_RESULT_PLAYER_POLYLINE_LINE_TO(4241),
    /**
     * <pre>
     *画折线的移动边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYLINE_MOVE_TO = 4250;</code>
     */
    MSG_INVOKE_PLAYER_POLYLINE_MOVE_TO(4250),
    /**
     * <pre>
     *画折线的移动边的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYLINE_MOVE_TO = 4251;</code>
     */
    MSG_RESULT_PLAYER_POLYLINE_MOVE_TO(4251),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *海图引擎初始化
     * </pre>
     *
     * <code>MSG_INVOKE_INIT = 0;</code>
     */
    public static final int MSG_INVOKE_INIT_VALUE = 0;
    /**
     * <pre>
     *海图引擎初始化的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_INIT = 1;</code>
     */
    public static final int MSG_RESULT_INIT_VALUE = 1;
    /**
     * <pre>
     *海图引擎反初始化
     * </pre>
     *
     * <code>MSG_INVOKE_UNINIT = 2;</code>
     */
    public static final int MSG_INVOKE_UNINIT_VALUE = 2;
    /**
     * <pre>
     *海图引擎反初始化的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_UNINIT = 3;</code>
     */
    public static final int MSG_RESULT_UNINIT_VALUE = 3;
    /**
     * <pre>
     *-----------------------MapView---------------------------
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_CREATE = 1000;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_CREATE_VALUE = 1000;
    /**
     * <pre>
     *创建海图显示视图的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_CREATE = 1001;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_CREATE_VALUE = 1001;
    /**
     * <pre>
     *销毁创建的显示视图
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_DESTROY = 1010;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_DESTROY_VALUE = 1010;
    /**
     * <pre>
     *销毁创建的显示视图的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_DESTROY = 1011;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_DESTROY_VALUE = 1011;
    /**
     * <pre>
     *获取视图比例尺
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_SCALE = 1020;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_SCALE_VALUE = 1020;
    /**
     * <pre>
     *获取视图比例尺的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_SCALE = 1021;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_SCALE_VALUE = 1021;
    /**
     * <pre>
     *设置视图比例尺
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCALE = 1030;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_SCALE_VALUE = 1030;
    /**
     * <pre>
     *设置视图比例尺的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCALE = 1031;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_SCALE_VALUE = 1031;
    /**
     * <pre>
     *设置视图缩放倍率
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR = 1040;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR_VALUE = 1040;
    /**
     * <pre>
     *设置视图缩放倍率的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR = 1041;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR_VALUE = 1041;
    /**
     * <pre>
     *获取视图参数dpi(每英寸像素数)
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_DPI = 1050;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_DPI_VALUE = 1050;
    /**
     * <pre>
     *获取视图参数dpi的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_DPI = 1051;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_DPI_VALUE = 1051;
    /**
     * <pre>
     *设置视图参数dpi
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_DPI = 1060;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_DPI_VALUE = 1060;
    /**
     * <pre>
     *设置视图参数dpi的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_DPI = 1061;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_DPI_VALUE = 1061;
    /**
     * <pre>
     *获取显示视图大小
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE = 1070;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE_VALUE = 1070;
    /**
     * <pre>
     *获取显示视图大小的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_SCREEN_SIZE = 1071;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_SCREEN_SIZE_VALUE = 1071;
    /**
     * <pre>
     *设置显示视图大小
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE = 1080;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE_VALUE = 1080;
    /**
     * <pre>
     *设置显示视图大小的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE = 1081;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE_VALUE = 1081;
    /**
     * <pre>
     *以指定的地理坐标做为视图中心
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_CENTER = 1090;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_CENTER_VALUE = 1090;
    /**
     * <pre>
     *以指定的地理坐标作为视图中心的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_CENTER = 1091;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_CENTER_VALUE = 1091;
    /**
     * <pre>
     *将视图移动指定的像素距离
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_MOVE = 1100;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_MOVE_VALUE = 1100;
    /**
     * <pre>
     *将视图移动指定的像素距离的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_MOVE = 1101;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_MOVE_VALUE = 1101;
    /**
     * <pre>
     *更新视图所有图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE = 1110;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_UPDATE_VALUE = 1110;
    /**
     * <pre>
     *更新视图的所有图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE = 1111;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_UPDATE_VALUE = 1111;
    /**
     * <pre>
     *绘制所有图层，注意：必须在非主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_DRAW = 1120;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_DRAW_VALUE = 1120;
    /**
     * <pre>
     *绘制所有图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_DRAW = 1121;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_DRAW_VALUE = 1121;
    /**
     * <pre>
     *获取海图图层的id
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER = 1130;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER_VALUE = 1130;
    /**
     * <pre>
     *获取海图图层的id的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_BASEMAP_LAYER = 1131;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_BASEMAP_LAYER_VALUE = 1131;
    /**
     * <pre>
     *获取动态船舶图层id
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER = 1140;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER_VALUE = 1140;
    /**
     * <pre>
     *获取动态船舶图层id的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_VESSEL_LAYER = 1141;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_VESSEL_LAYER_VALUE = 1141;
    /**
     * <pre>
     *获取可持久化图层(即自定义图层的集合)
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER = 1150;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER_VALUE = 1150;
    /**
     * <pre>
     *获取可持久化图层(即自定义图层的集合)的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER = 1151;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER_VALUE = 1151;
    /**
     * <pre>
     *更新动态船舶图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER = 1160;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER_VALUE = 1160;
    /**
     * <pre>
     *更新动态船舶图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER = 1161;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER_VALUE = 1161;
    /**
     * <pre>
     *更新可持久化图层，注意：必须在主线程调用
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER = 1170;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER_VALUE = 1170;
    /**
     * <pre>
     *更新可持久化图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER = 1171;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER_VALUE = 1171;
    /**
     * <pre>
     *获取图幅顺时针旋转的角度
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_GET_ROTATION = 1180;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_GET_ROTATION_VALUE = 1180;
    /**
     * <pre>
     *获取图幅顺时针旋转的角度的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_GET_ROTATION = 1181;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_GET_ROTATION_VALUE = 1181;
    /**
     * <pre>
     *将图幅顺时针旋转
     * </pre>
     *
     * <code>MSG_INVOKE_MAPVIEW_SET_ROTATION = 1190;</code>
     */
    public static final int MSG_INVOKE_MAPVIEW_SET_ROTATION_VALUE = 1190;
    /**
     * <pre>
     *将图幅顺时针旋转的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_MAPVIEW_SET_ROTATION = 1191;</code>
     */
    public static final int MSG_RESULT_MAPVIEW_SET_ROTATION_VALUE = 1191;
    /**
     * <pre>
     *-----------------------BaseMapLayer---------------------------
     * </pre>
     *
     * <code>MSG_INVOKE_BPLAYER_OBJECT_IS_VISIBLE = 2000;</code>
     */
    public static final int MSG_INVOKE_BPLAYER_OBJECT_IS_VISIBLE_VALUE = 2000;
    /**
     * <pre>
     *海图图层物标是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_BPLAYER_OBJECT_IS_VISIBLE = 2001;</code>
     */
    public static final int MSG_RESULT_BPLAYER_OBJECT_IS_VISIBLE_VALUE = 2001;
    /**
     * <pre>
     *设置海图图层物标的可见性
     * </pre>
     *
     * <code>MSG_INVOKE_BPLAYER_OBJECT_SET_VISIBLE = 2010;</code>
     */
    public static final int MSG_INVOKE_BPLAYER_OBJECT_SET_VISIBLE_VALUE = 2010;
    /**
     * <pre>
     *设置海图图层物标的可见性的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_BPLAYER_OBJECT_SET_VISIBLE = 2011;</code>
     */
    public static final int MSG_RESULT_BPLAYER_OBJECT_SET_VISIBLE_VALUE = 2011;
    /**
     * <pre>
     *-----------------------VesselLayer---------------------------		
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_IS_VISIBLE = 3000;</code>
     */
    public static final int MSG_INVOKE_VLAYER_IS_VISIBLE_VALUE = 3000;
    /**
     * <pre>
     *动态船舶图层是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_IS_VISIBLE = 3001;</code>
     */
    public static final int MSG_RESULT_VLAYER_IS_VISIBLE_VALUE = 3001;
    /**
     * <pre>
     *设置动态船舶图层是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_VISIBLE = 3010;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_VISIBLE_VALUE = 3010;
    /**
     * <pre>
     *设置动态船舶图层是否可见的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_VISIBLE = 3011;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_VISIBLE_VALUE = 3011;
    /**
     * <pre>
     *船舶轨迹是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_IS_TRACK_VISIBLE = 3020;</code>
     */
    public static final int MSG_INVOKE_VLAYER_IS_TRACK_VISIBLE_VALUE = 3020;
    /**
     * <pre>
     *船舶轨迹是否可见的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_IS_TRACK_VISIBLE = 3021;</code>
     */
    public static final int MSG_RESULT_VLAYER_IS_TRACK_VISIBLE_VALUE = 3021;
    /**
     * <pre>
     *设置船舶轨迹是否可见
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_TRACK_VISIBLE = 3030;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_TRACK_VISIBLE_VALUE = 3030;
    /**
     * <pre>
     *设置船舶轨迹是否可见的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_TRACK_VISIBLE = 3031;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_TRACK_VISIBLE_VALUE = 3031;
    /**
     * <pre>
     *获取船舶轨迹的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_TRACK_INTERVAL = 3040;</code>
     */
    public static final int MSG_INVOKE_VLAYER_GET_TRACK_INTERVAL_VALUE = 3040;
    /**
     * <pre>
     *获取船舶轨迹的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_TRACK_INTERVAL = 3041;</code>
     */
    public static final int MSG_RESULT_VLAYER_GET_TRACK_INTERVAL_VALUE = 3041;
    /**
     * <pre>
     *设置船舶轨迹的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_TRACK_INTERVAL = 3050;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_TRACK_INTERVAL_VALUE = 3050;
    /**
     * <pre>
     *设置船舶轨迹的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_TRACK_INTERVAL = 3051;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_TRACK_INTERVAL_VALUE = 3051;
    /**
     * <pre>
     *获取船舶信号丢失的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_SIGNAL_LOST_INTERVAL = 3060;</code>
     */
    public static final int MSG_INVOKE_VLAYER_GET_SIGNAL_LOST_INTERVAL_VALUE = 3060;
    /**
     * <pre>
     *获取船舶信号丢失的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_SIGNAL_LOST_INTERVAL = 3061;</code>
     */
    public static final int MSG_RESULT_VLAYER_GET_SIGNAL_LOST_INTERVAL_VALUE = 3061;
    /**
     * <pre>
     *设置船舶信号丢失的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_SIGNAL_LOST_INTERVAL = 3070;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_SIGNAL_LOST_INTERVAL_VALUE = 3070;
    /**
     * <pre>
     *设置船舶信号丢失的间隔时间的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_SIGNAL_LOST_INTERVAL = 3071;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_SIGNAL_LOST_INTERVAL_VALUE = 3071;
    /**
     * <pre>
     *获取船舶移除显示的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_REMOVE_INTERVAL = 3080;</code>
     */
    public static final int MSG_INVOKE_VLAYER_GET_REMOVE_INTERVAL_VALUE = 3080;
    /**
     * <pre>
     *获取船舶移除显示的间隔时间的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_REMVOE_INTERVAL = 3081;</code>
     */
    public static final int MSG_RESULT_VLAYER_GET_REMVOE_INTERVAL_VALUE = 3081;
    /**
     * <pre>
     *设置船舶移除显示的间隔时间
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_REMOVE_INTERVAL = 3090;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_REMOVE_INTERVAL_VALUE = 3090;
    /**
     * <pre>
     *设置船舶移除显示的间隔时间的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_REMVOE_INTERVAL = 3091;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_REMVOE_INTERVAL_VALUE = 3091;
    /**
     * <pre>
     *更新船舶位置信息
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_UPDATE_VESSELS_POSITION_REPORT = 3100;</code>
     */
    public static final int MSG_INVOKE_VLAYER_UPDATE_VESSELS_POSITION_REPORT_VALUE = 3100;
    /**
     * <pre>
     *更新船舶位置信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_UPDATE_VESSELS_POSITION_REPORT = 3101;</code>
     */
    public static final int MSG_RESULT_VLAYER_UPDATE_VESSELS_POSITION_REPORT_VALUE = 3101;
    /**
     * <pre>
     *更新船舶静态及航行信息
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT = 3110;</code>
     */
    public static final int MSG_INVOKE_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT_VALUE = 3110;
    /**
     * <pre>
     *更新船舶静态及航行信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT = 3111;</code>
     */
    public static final int MSG_RESULT_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT_VALUE = 3111;
    /**
     * <pre>
     *获取设置的本船的MMSI
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_GET_OWN_MMSI = 3120;</code>
     */
    public static final int MSG_INVOKE_VLAYER_GET_OWN_MMSI_VALUE = 3120;
    /**
     * <pre>
     *获取设置的本船的MMSI的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_GET_OWN_MMSI = 3121;</code>
     */
    public static final int MSG_RESULT_VLAYER_GET_OWN_MMSI_VALUE = 3121;
    /**
     * <pre>
     *设置本船的MMSI
     * </pre>
     *
     * <code>MSG_INVOKE_VLAYER_SET_OWN_MMSI = 3130;</code>
     */
    public static final int MSG_INVOKE_VLAYER_SET_OWN_MMSI_VALUE = 3130;
    /**
     * <pre>
     *设置本船的MMSI的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_VLAYER_SET_OWN_MMSI = 3131;</code>
     */
    public static final int MSG_RESULT_VLAYER_SET_OWN_MMSI_VALUE = 3131;
    /**
     * <pre>
     *------------------------PersistableLayer---------------------------			
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_CREATE_SUBLAYER = 4000;</code>
     */
    public static final int MSG_INVOKE_PLAYER_CREATE_SUBLAYER_VALUE = 4000;
    /**
     * <pre>
     *在内存中创建自定义图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_CREATE_SUBLAYER = 4001;</code>
     */
    public static final int MSG_RESULT_PLAYER_CREATE_SUBLAYER_VALUE = 4001;
    /**
     * <pre>
     *销毁内存中创建的或已加载的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DESTROY_SUBLAYER = 4010;</code>
     */
    public static final int MSG_INVOKE_PLAYER_DESTROY_SUBLAYER_VALUE = 4010;
    /**
     * <pre>
     *销毁内存中创建的或已加载的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DESTROY_SUBLAYER = 4011;</code>
     */
    public static final int MSG_RESULT_PLAYER_DESTROY_SUBLAYER_VALUE = 4011;
    /**
     * <pre>
     *从持久层删除(内存中若已加载仍保留)已保存的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_REMOVE_SUBLAYER = 4020;</code>
     */
    public static final int MSG_INVOKE_PLAYER_REMOVE_SUBLAYER_VALUE = 4020;
    /**
     * <pre>
     *从持久层删除(内存中若已加载仍保留)已保存的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_REMOVE_SUBLAYER = 4021;</code>
     */
    public static final int MSG_RESULT_PLAYER_REMOVE_SUBLAYER_VALUE = 4021;
    /**
     * <pre>
     *将内存中的自定义图层保存至文件
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SAVE_SUBLAYER = 4030;</code>
     */
    public static final int MSG_INVOKE_PLAYER_SAVE_SUBLAYER_VALUE = 4030;
    /**
     * <pre>
     *将内存中的自定义图层保存至文件的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SAVE_SUBLAYER = 4031;</code>
     */
    public static final int MSG_RESULT_PLAYER_SAVE_SUBLAYER_VALUE = 4031;
    /**
     * <pre>
     *获取已保存的所有自定义图层的信息
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_INFO = 4040;</code>
     */
    public static final int MSG_INVOKE_PLAYER_GET_SUBLAYERS_INFO_VALUE = 4040;
    /**
     * <pre>
     *获取已保存的所有自定义图层的信息的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLAYERS_INFO = 4041;</code>
     */
    public static final int MSG_RESULT_PLAYER_GET_SUBLAYERS_INFO_VALUE = 4041;
    /**
     * <pre>
     *获取内存中自定义图层的数量
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_COUNT = 4050;</code>
     */
    public static final int MSG_INVOKE_PLAYER_GET_SUBLAYERS_COUNT_VALUE = 4050;
    /**
     * <pre>
     *获取内存中自定义图层的数量的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLSYERS_COUNT = 4051;</code>
     */
    public static final int MSG_RESULT_PLAYER_GET_SUBLSYERS_COUNT_VALUE = 4051;
    /**
     * <pre>
     *设置自定义图层的渲染顺序，0为最先渲染，Count-1为最后渲染
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_SUBLAYER_ORDER = 4060;</code>
     */
    public static final int MSG_INVOKE_PLAYER_SET_SUBLAYER_ORDER_VALUE = 4060;
    /**
     * <pre>
     *设置自定义图层的渲染顺序的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_SUBLAYER_ORDER = 4061;</code>
     */
    public static final int MSG_RESULT_PLAYER_SET_SUBLAYER_ORDER_VALUE = 4061;
    /**
     * <pre>
     *获取自定义图层的渲染顺序
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_SUBLAYERS_ORDER = 4070;</code>
     */
    public static final int MSG_INVOKE_PLAYER_GET_SUBLAYERS_ORDER_VALUE = 4070;
    /**
     * <pre>
     *获取自定义图层的渲染顺序的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_SUBLAYERS_ORDER = 4071;</code>
     */
    public static final int MSG_RESULT_PLAYER_GET_SUBLAYERS_ORDER_VALUE = 4071;
    /**
     * <pre>
     *设置最上层(即最后渲染)的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_TOP_SUBLAYER = 4080;</code>
     */
    public static final int MSG_INVOKE_PLAYER_SET_TOP_SUBLAYER_VALUE = 4080;
    /**
     * <pre>
     *设置最上层(即最后渲染)的自定义图层的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_TOP_SUBLAYER = 4081;</code>
     */
    public static final int MSG_RESULT_PLAYER_SET_TOP_SUBLAYER_VALUE = 4081;
    /**
     * <pre>
     *获取最上层(即最后渲染)的自定义图层
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_GET_TOP_SUBLAYER = 4090;</code>
     */
    public static final int MSG_INVOKE_PLAYER_GET_TOP_SUBLAYER_VALUE = 4090;
    /**
     * <pre>
     *获取最上层(即最后渲染)的自定义图层的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_GET_TOP_SUBLAYER = 4091;</code>
     */
    public static final int MSG_RESULT_PLAYER_GET_TOP_SUBLAYER_VALUE = 4091;
    /**
     * <pre>
     *开始在指定的自定义图层上绘制图元
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_DRAW = 4100;</code>
     */
    public static final int MSG_INVOKE_PLAYER_BEGIN_DRAW_VALUE = 4100;
    /**
     * <pre>
     *开始在指定的自定义图层上绘制图元的返回结果
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_DRAW = 4101;</code>
     */
    public static final int MSG_RESULT_PLAYER_BEGIN_DRAW_VALUE = 4101;
    /**
     * <pre>
     *结束在指定的自定义图层上绘制图元
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_DRAW = 4110;</code>
     */
    public static final int MSG_INVOKE_PLAYER_END_DRAW_VALUE = 4110;
    /**
     * <pre>
     *结束在指定的自定义图层上绘制图元的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_DRAW = 4111;</code>
     */
    public static final int MSG_RESULT_PLAYER_END_DRAW_VALUE = 4111;
    /**
     * <pre>
     *设置画笔属性
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SET_PEN = 4120;</code>
     */
    public static final int MSG_INVOKE_PLAYER_SET_PEN_VALUE = 4120;
    /**
     * <pre>
     *设置画笔属性的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SET_PEN = 4121;</code>
     */
    public static final int MSG_RESULT_PLAYER_SET_PEN_VALUE = 4121;
    /**
     * <pre>
     *从当前位置移动指定位置
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_MOVE_TO = 4130;</code>
     */
    public static final int MSG_INVOKE_PLAYER_MOVE_TO_VALUE = 4130;
    /**
     * <pre>
     *从当前位置移动指定位置的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_MOVE_TO = 4131;</code>
     */
    public static final int MSG_RESULT_PLAYER_MOVE_TO_VALUE = 4131;
    /**
     * <pre>
     *以当前位置为圆心画圆
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DRAW_CIRCLE = 4140;</code>
     */
    public static final int MSG_INVOKE_PLAYER_DRAW_CIRCLE_VALUE = 4140;
    /**
     * <pre>
     *以当前位置为圆心画圆的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DRAW_CIRCLE = 4141;</code>
     */
    public static final int MSG_RESULT_PLAYER_DRAW_CIRCLE_VALUE = 4141;
    /**
     * <pre>
     *以当前位置为圆心，用当前画笔颜色填充圆
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_FILL_CIRCLE = 4150;</code>
     */
    public static final int MSG_INVOKE_PLAYER_FILL_CIRCLE_VALUE = 4150;
    /**
     * <pre>
     *以当前位置为圆心，用当前画笔颜色填充圆的返回结果			
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_FILL_CIRCLE = 4151;</code>
     */
    public static final int MSG_RESULT_PLAYER_FILL_CIRCLE_VALUE = 4151;
    /**
     * <pre>
     *在当前位置输出文本
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_SHOW_TEXT = 4160;</code>
     */
    public static final int MSG_INVOKE_PLAYER_SHOW_TEXT_VALUE = 4160;
    /**
     * <pre>
     *在当前位置输出文本的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_SHOW_TEXT = 4161;</code>
     */
    public static final int MSG_RESULT_PLAYER_SHOW_TEXT_VALUE = 4161;
    /**
     * <pre>
     *在当前位置显示png图片
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_DRAW_PNG = 4170;</code>
     */
    public static final int MSG_INVOKE_PLAYER_DRAW_PNG_VALUE = 4170;
    /**
     * <pre>
     *在当前位置显示png图片的而返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_DRAW_PNG = 4171;</code>
     */
    public static final int MSG_RESULT_PLAYER_DRAW_PNG_VALUE = 4171;
    /**
     * <pre>
     *开始画多边形，注意：一旦开始后，必须结束才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_POLYGON = 4180;</code>
     */
    public static final int MSG_INVOKE_PLAYER_BEGIN_POLYGON_VALUE = 4180;
    /**
     * <pre>
     *开始画多边形的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_POLYGON = 4181;</code>
     */
    public static final int MSG_RESULT_PLAYER_BEGIN_POLYGON_VALUE = 4181;
    /**
     * <pre>
     *结束画多边形，结束后才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_POLYGON = 4190;</code>
     */
    public static final int MSG_INVOKE_PLAYER_END_POLYGON_VALUE = 4190;
    /**
     * <pre>
     *结束画多边形的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_POLYGON = 4191;</code>
     */
    public static final int MSG_RESULT_PLAYER_END_POLYGON_VALUE = 4191;
    /**
     * <pre>
     *画多边形的一条边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYGON_LINE_TO = 4200;</code>
     */
    public static final int MSG_INVOKE_PLAYER_POLYGON_LINE_TO_VALUE = 4200;
    /**
     * <pre>
     *画多边形的一条边的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYGON_LINE_TO = 4201;</code>
     */
    public static final int MSG_RESULT_PLAYER_POLYGON_LINE_TO_VALUE = 4201;
    /**
     * <pre>
     *画多边形的移动边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYGON_MOVE_TO = 4210;</code>
     */
    public static final int MSG_INVOKE_PLAYER_POLYGON_MOVE_TO_VALUE = 4210;
    /**
     * <pre>
     *画多边形的移动边的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYGON_MOVE_TO = 4211;</code>
     */
    public static final int MSG_RESULT_PLAYER_POLYGON_MOVE_TO_VALUE = 4211;
    /**
     * <pre>
     *开始画折线，注意：一旦开始后，必须结束才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_BEGIN_POLYLINE = 4220;</code>
     */
    public static final int MSG_INVOKE_PLAYER_BEGIN_POLYLINE_VALUE = 4220;
    /**
     * <pre>
     *开始画折线的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_BEGIN_POLYLINE = 4221;</code>
     */
    public static final int MSG_RESULT_PLAYER_BEGIN_POLYLINE_VALUE = 4221;
    /**
     * <pre>
     *结束画折线，结束后才能进行其他绘制动作
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_END_POLYLINE = 4230;</code>
     */
    public static final int MSG_INVOKE_PLAYER_END_POLYLINE_VALUE = 4230;
    /**
     * <pre>
     *结束画折线的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_END_POLYLINE = 4231;</code>
     */
    public static final int MSG_RESULT_PLAYER_END_POLYLINE_VALUE = 4231;
    /**
     * <pre>
     *画一条折线
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYLINE_LINE_TO = 4240;</code>
     */
    public static final int MSG_INVOKE_PLAYER_POLYLINE_LINE_TO_VALUE = 4240;
    /**
     * <pre>
     *画一条折线的返回结果	
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYLINE_LINE_TO = 4241;</code>
     */
    public static final int MSG_RESULT_PLAYER_POLYLINE_LINE_TO_VALUE = 4241;
    /**
     * <pre>
     *画折线的移动边
     * </pre>
     *
     * <code>MSG_INVOKE_PLAYER_POLYLINE_MOVE_TO = 4250;</code>
     */
    public static final int MSG_INVOKE_PLAYER_POLYLINE_MOVE_TO_VALUE = 4250;
    /**
     * <pre>
     *画折线的移动边的返回结果		
     * </pre>
     *
     * <code>MSG_RESULT_PLAYER_POLYLINE_MOVE_TO = 4251;</code>
     */
    public static final int MSG_RESULT_PLAYER_POLYLINE_MOVE_TO_VALUE = 4251;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EChart_MsgType valueOf(int value) {
      return forNumber(value);
    }

    public static EChart_MsgType forNumber(int value) {
      switch (value) {
        case 0: return MSG_INVOKE_INIT;
        case 1: return MSG_RESULT_INIT;
        case 2: return MSG_INVOKE_UNINIT;
        case 3: return MSG_RESULT_UNINIT;
        case 1000: return MSG_INVOKE_MAPVIEW_CREATE;
        case 1001: return MSG_RESULT_MAPVIEW_CREATE;
        case 1010: return MSG_INVOKE_MAPVIEW_DESTROY;
        case 1011: return MSG_RESULT_MAPVIEW_DESTROY;
        case 1020: return MSG_INVOKE_MAPVIEW_GET_SCALE;
        case 1021: return MSG_RESULT_MAPVIEW_GET_SCALE;
        case 1030: return MSG_INVOKE_MAPVIEW_SET_SCALE;
        case 1031: return MSG_RESULT_MAPVIEW_SET_SCALE;
        case 1040: return MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR;
        case 1041: return MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR;
        case 1050: return MSG_INVOKE_MAPVIEW_GET_DPI;
        case 1051: return MSG_RESULT_MAPVIEW_GET_DPI;
        case 1060: return MSG_INVOKE_MAPVIEW_SET_DPI;
        case 1061: return MSG_RESULT_MAPVIEW_SET_DPI;
        case 1070: return MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE;
        case 1071: return MSG_RESULT_MAPVIEW_GET_SCREEN_SIZE;
        case 1080: return MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE;
        case 1081: return MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE;
        case 1090: return MSG_INVOKE_MAPVIEW_SET_CENTER;
        case 1091: return MSG_RESULT_MAPVIEW_SET_CENTER;
        case 1100: return MSG_INVOKE_MAPVIEW_MOVE;
        case 1101: return MSG_RESULT_MAPVIEW_MOVE;
        case 1110: return MSG_INVOKE_MAPVIEW_UPDATE;
        case 1111: return MSG_RESULT_MAPVIEW_UPDATE;
        case 1120: return MSG_INVOKE_MAPVIEW_DRAW;
        case 1121: return MSG_RESULT_MAPVIEW_DRAW;
        case 1130: return MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER;
        case 1131: return MSG_RESULT_MAPVIEW_GET_BASEMAP_LAYER;
        case 1140: return MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER;
        case 1141: return MSG_RESULT_MAPVIEW_GET_VESSEL_LAYER;
        case 1150: return MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER;
        case 1151: return MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER;
        case 1160: return MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER;
        case 1161: return MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER;
        case 1170: return MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER;
        case 1171: return MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER;
        case 1180: return MSG_INVOKE_MAPVIEW_GET_ROTATION;
        case 1181: return MSG_RESULT_MAPVIEW_GET_ROTATION;
        case 1190: return MSG_INVOKE_MAPVIEW_SET_ROTATION;
        case 1191: return MSG_RESULT_MAPVIEW_SET_ROTATION;
        case 2000: return MSG_INVOKE_BPLAYER_OBJECT_IS_VISIBLE;
        case 2001: return MSG_RESULT_BPLAYER_OBJECT_IS_VISIBLE;
        case 2010: return MSG_INVOKE_BPLAYER_OBJECT_SET_VISIBLE;
        case 2011: return MSG_RESULT_BPLAYER_OBJECT_SET_VISIBLE;
        case 3000: return MSG_INVOKE_VLAYER_IS_VISIBLE;
        case 3001: return MSG_RESULT_VLAYER_IS_VISIBLE;
        case 3010: return MSG_INVOKE_VLAYER_SET_VISIBLE;
        case 3011: return MSG_RESULT_VLAYER_SET_VISIBLE;
        case 3020: return MSG_INVOKE_VLAYER_IS_TRACK_VISIBLE;
        case 3021: return MSG_RESULT_VLAYER_IS_TRACK_VISIBLE;
        case 3030: return MSG_INVOKE_VLAYER_SET_TRACK_VISIBLE;
        case 3031: return MSG_RESULT_VLAYER_SET_TRACK_VISIBLE;
        case 3040: return MSG_INVOKE_VLAYER_GET_TRACK_INTERVAL;
        case 3041: return MSG_RESULT_VLAYER_GET_TRACK_INTERVAL;
        case 3050: return MSG_INVOKE_VLAYER_SET_TRACK_INTERVAL;
        case 3051: return MSG_RESULT_VLAYER_SET_TRACK_INTERVAL;
        case 3060: return MSG_INVOKE_VLAYER_GET_SIGNAL_LOST_INTERVAL;
        case 3061: return MSG_RESULT_VLAYER_GET_SIGNAL_LOST_INTERVAL;
        case 3070: return MSG_INVOKE_VLAYER_SET_SIGNAL_LOST_INTERVAL;
        case 3071: return MSG_RESULT_VLAYER_SET_SIGNAL_LOST_INTERVAL;
        case 3080: return MSG_INVOKE_VLAYER_GET_REMOVE_INTERVAL;
        case 3081: return MSG_RESULT_VLAYER_GET_REMVOE_INTERVAL;
        case 3090: return MSG_INVOKE_VLAYER_SET_REMOVE_INTERVAL;
        case 3091: return MSG_RESULT_VLAYER_SET_REMVOE_INTERVAL;
        case 3100: return MSG_INVOKE_VLAYER_UPDATE_VESSELS_POSITION_REPORT;
        case 3101: return MSG_RESULT_VLAYER_UPDATE_VESSELS_POSITION_REPORT;
        case 3110: return MSG_INVOKE_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT;
        case 3111: return MSG_RESULT_VLAYER_UPDATE_VESSELS_STATIC_VOYAGE_REPORT;
        case 3120: return MSG_INVOKE_VLAYER_GET_OWN_MMSI;
        case 3121: return MSG_RESULT_VLAYER_GET_OWN_MMSI;
        case 3130: return MSG_INVOKE_VLAYER_SET_OWN_MMSI;
        case 3131: return MSG_RESULT_VLAYER_SET_OWN_MMSI;
        case 4000: return MSG_INVOKE_PLAYER_CREATE_SUBLAYER;
        case 4001: return MSG_RESULT_PLAYER_CREATE_SUBLAYER;
        case 4010: return MSG_INVOKE_PLAYER_DESTROY_SUBLAYER;
        case 4011: return MSG_RESULT_PLAYER_DESTROY_SUBLAYER;
        case 4020: return MSG_INVOKE_PLAYER_REMOVE_SUBLAYER;
        case 4021: return MSG_RESULT_PLAYER_REMOVE_SUBLAYER;
        case 4030: return MSG_INVOKE_PLAYER_SAVE_SUBLAYER;
        case 4031: return MSG_RESULT_PLAYER_SAVE_SUBLAYER;
        case 4040: return MSG_INVOKE_PLAYER_GET_SUBLAYERS_INFO;
        case 4041: return MSG_RESULT_PLAYER_GET_SUBLAYERS_INFO;
        case 4050: return MSG_INVOKE_PLAYER_GET_SUBLAYERS_COUNT;
        case 4051: return MSG_RESULT_PLAYER_GET_SUBLSYERS_COUNT;
        case 4060: return MSG_INVOKE_PLAYER_SET_SUBLAYER_ORDER;
        case 4061: return MSG_RESULT_PLAYER_SET_SUBLAYER_ORDER;
        case 4070: return MSG_INVOKE_PLAYER_GET_SUBLAYERS_ORDER;
        case 4071: return MSG_RESULT_PLAYER_GET_SUBLAYERS_ORDER;
        case 4080: return MSG_INVOKE_PLAYER_SET_TOP_SUBLAYER;
        case 4081: return MSG_RESULT_PLAYER_SET_TOP_SUBLAYER;
        case 4090: return MSG_INVOKE_PLAYER_GET_TOP_SUBLAYER;
        case 4091: return MSG_RESULT_PLAYER_GET_TOP_SUBLAYER;
        case 4100: return MSG_INVOKE_PLAYER_BEGIN_DRAW;
        case 4101: return MSG_RESULT_PLAYER_BEGIN_DRAW;
        case 4110: return MSG_INVOKE_PLAYER_END_DRAW;
        case 4111: return MSG_RESULT_PLAYER_END_DRAW;
        case 4120: return MSG_INVOKE_PLAYER_SET_PEN;
        case 4121: return MSG_RESULT_PLAYER_SET_PEN;
        case 4130: return MSG_INVOKE_PLAYER_MOVE_TO;
        case 4131: return MSG_RESULT_PLAYER_MOVE_TO;
        case 4140: return MSG_INVOKE_PLAYER_DRAW_CIRCLE;
        case 4141: return MSG_RESULT_PLAYER_DRAW_CIRCLE;
        case 4150: return MSG_INVOKE_PLAYER_FILL_CIRCLE;
        case 4151: return MSG_RESULT_PLAYER_FILL_CIRCLE;
        case 4160: return MSG_INVOKE_PLAYER_SHOW_TEXT;
        case 4161: return MSG_RESULT_PLAYER_SHOW_TEXT;
        case 4170: return MSG_INVOKE_PLAYER_DRAW_PNG;
        case 4171: return MSG_RESULT_PLAYER_DRAW_PNG;
        case 4180: return MSG_INVOKE_PLAYER_BEGIN_POLYGON;
        case 4181: return MSG_RESULT_PLAYER_BEGIN_POLYGON;
        case 4190: return MSG_INVOKE_PLAYER_END_POLYGON;
        case 4191: return MSG_RESULT_PLAYER_END_POLYGON;
        case 4200: return MSG_INVOKE_PLAYER_POLYGON_LINE_TO;
        case 4201: return MSG_RESULT_PLAYER_POLYGON_LINE_TO;
        case 4210: return MSG_INVOKE_PLAYER_POLYGON_MOVE_TO;
        case 4211: return MSG_RESULT_PLAYER_POLYGON_MOVE_TO;
        case 4220: return MSG_INVOKE_PLAYER_BEGIN_POLYLINE;
        case 4221: return MSG_RESULT_PLAYER_BEGIN_POLYLINE;
        case 4230: return MSG_INVOKE_PLAYER_END_POLYLINE;
        case 4231: return MSG_RESULT_PLAYER_END_POLYLINE;
        case 4240: return MSG_INVOKE_PLAYER_POLYLINE_LINE_TO;
        case 4241: return MSG_RESULT_PLAYER_POLYLINE_LINE_TO;
        case 4250: return MSG_INVOKE_PLAYER_POLYLINE_MOVE_TO;
        case 4251: return MSG_RESULT_PLAYER_POLYLINE_MOVE_TO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EChart_MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EChart_MsgType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EChart_MsgType>() {
            public EChart_MsgType findValueByNumber(int number) {
              return EChart_MsgType.forNumber(number);
            }
          };

    private final int value;

    private EChart_MsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:echart.EChart_MsgType)
  }

  /**
   * Protobuf enum {@code echart.EChart_FontFamily}
   */
  public enum EChart_FontFamily
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>FONT_FAMILY_SERIF = 0;</code>
     */
    FONT_FAMILY_SERIF(0),
    /**
     * <code>FONT_FAMILY_SANS_SERIF = 1;</code>
     */
    FONT_FAMILY_SANS_SERIF(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>FONT_FAMILY_SERIF = 0;</code>
     */
    public static final int FONT_FAMILY_SERIF_VALUE = 0;
    /**
     * <code>FONT_FAMILY_SANS_SERIF = 1;</code>
     */
    public static final int FONT_FAMILY_SANS_SERIF_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EChart_FontFamily valueOf(int value) {
      return forNumber(value);
    }

    public static EChart_FontFamily forNumber(int value) {
      switch (value) {
        case 0: return FONT_FAMILY_SERIF;
        case 1: return FONT_FAMILY_SANS_SERIF;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EChart_FontFamily>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EChart_FontFamily> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EChart_FontFamily>() {
            public EChart_FontFamily findValueByNumber(int number) {
              return EChart_FontFamily.forNumber(number);
            }
          };

    private final int value;

    private EChart_FontFamily(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:echart.EChart_FontFamily)
  }

  /**
   * Protobuf enum {@code echart.EChart_GeoType}
   */
  public enum EChart_GeoType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>GEO_TYPE_NULL = 0;</code>
     */
    GEO_TYPE_NULL(0),
    /**
     * <code>GEO_TYPE_POINT = 1;</code>
     */
    GEO_TYPE_POINT(1),
    /**
     * <code>GEO_TYPE_LINESTRING = 2;</code>
     */
    GEO_TYPE_LINESTRING(2),
    /**
     * <code>GEO_TYPE_POLYGON = 3;</code>
     */
    GEO_TYPE_POLYGON(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>GEO_TYPE_NULL = 0;</code>
     */
    public static final int GEO_TYPE_NULL_VALUE = 0;
    /**
     * <code>GEO_TYPE_POINT = 1;</code>
     */
    public static final int GEO_TYPE_POINT_VALUE = 1;
    /**
     * <code>GEO_TYPE_LINESTRING = 2;</code>
     */
    public static final int GEO_TYPE_LINESTRING_VALUE = 2;
    /**
     * <code>GEO_TYPE_POLYGON = 3;</code>
     */
    public static final int GEO_TYPE_POLYGON_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EChart_GeoType valueOf(int value) {
      return forNumber(value);
    }

    public static EChart_GeoType forNumber(int value) {
      switch (value) {
        case 0: return GEO_TYPE_NULL;
        case 1: return GEO_TYPE_POINT;
        case 2: return GEO_TYPE_LINESTRING;
        case 3: return GEO_TYPE_POLYGON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EChart_GeoType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EChart_GeoType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EChart_GeoType>() {
            public EChart_GeoType findValueByNumber(int number) {
              return EChart_GeoType.forNumber(number);
            }
          };

    private final int value;

    private EChart_GeoType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:echart.EChart_GeoType)
  }

  public interface EChart_InvokeHeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_InvokeHeader)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    int getMsgValue();
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    com.ndk.echart.Echart.EChart_MsgType getMsg();

    /**
     * <pre>
     *每次请求的唯一id(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    long getUuid();
  }
  /**
   * Protobuf type {@code echart.EChart_InvokeHeader}
   */
  public  static final class EChart_InvokeHeader extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeHeader, EChart_InvokeHeader.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_InvokeHeader)
      EChart_InvokeHeaderOrBuilder {
    private EChart_InvokeHeader() {
    }
    public static final int MSG_FIELD_NUMBER = 1;
    private int msg_;
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    public int getMsgValue() {
      return msg_;
    }
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_MsgType getMsg() {
      com.ndk.echart.Echart.EChart_MsgType result = com.ndk.echart.Echart.EChart_MsgType.forNumber(msg_);
      return result == null ? com.ndk.echart.Echart.EChart_MsgType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void setMsgValue(int value) {
        msg_ = value;
    }
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void setMsg(com.ndk.echart.Echart.EChart_MsgType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      msg_ = value.getNumber();
    }
    /**
     * <pre>
     *请求的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void clearMsg() {
      
      msg_ = 0;
    }

    public static final int UUID_FIELD_NUMBER = 2;
    private long uuid_;
    /**
     * <pre>
     *每次请求的唯一id(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    public long getUuid() {
      return uuid_;
    }
    /**
     * <pre>
     *每次请求的唯一id(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    private void setUuid(long value) {
      
      uuid_ = value;
    }
    /**
     * <pre>
     *每次请求的唯一id(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    private void clearUuid() {
      
      uuid_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (msg_ != com.ndk.echart.Echart.EChart_MsgType.MSG_INVOKE_INIT.getNumber()) {
        output.writeEnum(1, msg_);
      }
      if (uuid_ != 0L) {
        output.writeUInt64(2, uuid_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (msg_ != com.ndk.echart.Echart.EChart_MsgType.MSG_INVOKE_INIT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, msg_);
      }
      if (uuid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, uuid_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeHeader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_InvokeHeader prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_InvokeHeader}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_InvokeHeader, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_InvokeHeader)
        com.ndk.echart.Echart.EChart_InvokeHeaderOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *请求的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public int getMsgValue() {
        return instance.getMsgValue();
      }
      /**
       * <pre>
       *请求的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder setMsgValue(int value) {
        copyOnWrite();
        instance.setMsgValue(value);
        return this;
      }
      /**
       * <pre>
       *请求的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_MsgType getMsg() {
        return instance.getMsg();
      }
      /**
       * <pre>
       *请求的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder setMsg(com.ndk.echart.Echart.EChart_MsgType value) {
        copyOnWrite();
        instance.setMsg(value);
        return this;
      }
      /**
       * <pre>
       *请求的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }

      /**
       * <pre>
       *每次请求的唯一id(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public long getUuid() {
        return instance.getUuid();
      }
      /**
       * <pre>
       *每次请求的唯一id(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public Builder setUuid(long value) {
        copyOnWrite();
        instance.setUuid(value);
        return this;
      }
      /**
       * <pre>
       *每次请求的唯一id(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public Builder clearUuid() {
        copyOnWrite();
        instance.clearUuid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_InvokeHeader)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_InvokeHeader();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_InvokeHeader other = (com.ndk.echart.Echart.EChart_InvokeHeader) arg1;
          msg_ = visitor.visitInt(msg_ != 0, msg_,    other.msg_ != 0, other.msg_);
          uuid_ = visitor.visitLong(uuid_ != 0L, uuid_,
              other.uuid_ != 0L, other.uuid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  msg_ = rawValue;
                  break;
                }
                case 16: {

                  uuid_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_InvokeHeader.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_InvokeHeader)
    private static final com.ndk.echart.Echart.EChart_InvokeHeader DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeHeader();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_InvokeHeader getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeHeader> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeHeader> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultHeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_ResultHeader)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    int getMsgValue();
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    com.ndk.echart.Echart.EChart_MsgType getMsg();

    /**
     * <pre>
     *与请求时的id一致(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    long getUuid();

    /**
     * <pre>
     *是否成功
     * </pre>
     *
     * <code>optional bool result = 3;</code>
     */
    boolean getResult();

    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    java.lang.String getDescription();
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();
  }
  /**
   * Protobuf type {@code echart.EChart_ResultHeader}
   */
  public  static final class EChart_ResultHeader extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultHeader, EChart_ResultHeader.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_ResultHeader)
      EChart_ResultHeaderOrBuilder {
    private EChart_ResultHeader() {
      description_ = "";
    }
    public static final int MSG_FIELD_NUMBER = 1;
    private int msg_;
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    public int getMsgValue() {
      return msg_;
    }
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_MsgType getMsg() {
      com.ndk.echart.Echart.EChart_MsgType result = com.ndk.echart.Echart.EChart_MsgType.forNumber(msg_);
      return result == null ? com.ndk.echart.Echart.EChart_MsgType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void setMsgValue(int value) {
        msg_ = value;
    }
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void setMsg(com.ndk.echart.Echart.EChart_MsgType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      msg_ = value.getNumber();
    }
    /**
     * <pre>
     *返回的消息类型
     * </pre>
     *
     * <code>optional .echart.EChart_MsgType msg = 1;</code>
     */
    private void clearMsg() {
      
      msg_ = 0;
    }

    public static final int UUID_FIELD_NUMBER = 2;
    private long uuid_;
    /**
     * <pre>
     *与请求时的id一致(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    public long getUuid() {
      return uuid_;
    }
    /**
     * <pre>
     *与请求时的id一致(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    private void setUuid(long value) {
      
      uuid_ = value;
    }
    /**
     * <pre>
     *与请求时的id一致(可选)
     * </pre>
     *
     * <code>optional uint64 uuid = 2;</code>
     */
    private void clearUuid() {
      
      uuid_ = 0L;
    }

    public static final int RESULT_FIELD_NUMBER = 3;
    private boolean result_;
    /**
     * <pre>
     *是否成功
     * </pre>
     *
     * <code>optional bool result = 3;</code>
     */
    public boolean getResult() {
      return result_;
    }
    /**
     * <pre>
     *是否成功
     * </pre>
     *
     * <code>optional bool result = 3;</code>
     */
    private void setResult(boolean value) {
      
      result_ = value;
    }
    /**
     * <pre>
     *是否成功
     * </pre>
     *
     * <code>optional bool result = 3;</code>
     */
    private void clearResult() {
      
      result_ = false;
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 4;
    private java.lang.String description_;
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    public java.lang.String getDescription() {
      return description_;
    }
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(description_);
    }
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    private void setDescription(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      description_ = value;
    }
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    private void clearDescription() {
      
      description_ = getDefaultInstance().getDescription();
    }
    /**
     * <pre>
     *如果失败，描述失败的原因，否则为空
     * </pre>
     *
     * <code>optional string description = 4;</code>
     */
    private void setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      description_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (msg_ != com.ndk.echart.Echart.EChart_MsgType.MSG_INVOKE_INIT.getNumber()) {
        output.writeEnum(1, msg_);
      }
      if (uuid_ != 0L) {
        output.writeUInt64(2, uuid_);
      }
      if (result_ != false) {
        output.writeBool(3, result_);
      }
      if (!description_.isEmpty()) {
        output.writeString(4, getDescription());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (msg_ != com.ndk.echart.Echart.EChart_MsgType.MSG_INVOKE_INIT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, msg_);
      }
      if (uuid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, uuid_);
      }
      if (result_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, result_);
      }
      if (!description_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getDescription());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultHeader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_ResultHeader prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_ResultHeader}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_ResultHeader, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_ResultHeader)
        com.ndk.echart.Echart.EChart_ResultHeaderOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_ResultHeader.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *返回的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public int getMsgValue() {
        return instance.getMsgValue();
      }
      /**
       * <pre>
       *返回的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder setMsgValue(int value) {
        copyOnWrite();
        instance.setMsgValue(value);
        return this;
      }
      /**
       * <pre>
       *返回的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_MsgType getMsg() {
        return instance.getMsg();
      }
      /**
       * <pre>
       *返回的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder setMsg(com.ndk.echart.Echart.EChart_MsgType value) {
        copyOnWrite();
        instance.setMsg(value);
        return this;
      }
      /**
       * <pre>
       *返回的消息类型
       * </pre>
       *
       * <code>optional .echart.EChart_MsgType msg = 1;</code>
       */
      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }

      /**
       * <pre>
       *与请求时的id一致(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public long getUuid() {
        return instance.getUuid();
      }
      /**
       * <pre>
       *与请求时的id一致(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public Builder setUuid(long value) {
        copyOnWrite();
        instance.setUuid(value);
        return this;
      }
      /**
       * <pre>
       *与请求时的id一致(可选)
       * </pre>
       *
       * <code>optional uint64 uuid = 2;</code>
       */
      public Builder clearUuid() {
        copyOnWrite();
        instance.clearUuid();
        return this;
      }

      /**
       * <pre>
       *是否成功
       * </pre>
       *
       * <code>optional bool result = 3;</code>
       */
      public boolean getResult() {
        return instance.getResult();
      }
      /**
       * <pre>
       *是否成功
       * </pre>
       *
       * <code>optional bool result = 3;</code>
       */
      public Builder setResult(boolean value) {
        copyOnWrite();
        instance.setResult(value);
        return this;
      }
      /**
       * <pre>
       *是否成功
       * </pre>
       *
       * <code>optional bool result = 3;</code>
       */
      public Builder clearResult() {
        copyOnWrite();
        instance.clearResult();
        return this;
      }

      /**
       * <pre>
       *如果失败，描述失败的原因，否则为空
       * </pre>
       *
       * <code>optional string description = 4;</code>
       */
      public java.lang.String getDescription() {
        return instance.getDescription();
      }
      /**
       * <pre>
       *如果失败，描述失败的原因，否则为空
       * </pre>
       *
       * <code>optional string description = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        return instance.getDescriptionBytes();
      }
      /**
       * <pre>
       *如果失败，描述失败的原因，否则为空
       * </pre>
       *
       * <code>optional string description = 4;</code>
       */
      public Builder setDescription(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescription(value);
        return this;
      }
      /**
       * <pre>
       *如果失败，描述失败的原因，否则为空
       * </pre>
       *
       * <code>optional string description = 4;</code>
       */
      public Builder clearDescription() {
        copyOnWrite();
        instance.clearDescription();
        return this;
      }
      /**
       * <pre>
       *如果失败，描述失败的原因，否则为空
       * </pre>
       *
       * <code>optional string description = 4;</code>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_ResultHeader)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_ResultHeader();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_ResultHeader other = (com.ndk.echart.Echart.EChart_ResultHeader) arg1;
          msg_ = visitor.visitInt(msg_ != 0, msg_,    other.msg_ != 0, other.msg_);
          uuid_ = visitor.visitLong(uuid_ != 0L, uuid_,
              other.uuid_ != 0L, other.uuid_);
          result_ = visitor.visitBoolean(result_ != false, result_,
              other.result_ != false, other.result_);
          description_ = visitor.visitString(!description_.isEmpty(), description_,
              !other.description_.isEmpty(), other.description_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  msg_ = rawValue;
                  break;
                }
                case 16: {

                  uuid_ = input.readUInt64();
                  break;
                }
                case 24: {

                  result_ = input.readBool();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  description_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_ResultHeader.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_ResultHeader)
    private static final com.ndk.echart.Echart.EChart_ResultHeader DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultHeader();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_ResultHeader getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultHeader> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultHeader> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeInitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_InvokeInit)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    java.lang.String getDbFilename();
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    com.google.protobuf.ByteString
        getDbFilenameBytes();

    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    java.lang.String getMapPath();
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    com.google.protobuf.ByteString
        getMapPathBytes();

    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    java.lang.String getPersistablePath();
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    com.google.protobuf.ByteString
        getPersistablePathBytes();

    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    java.lang.String getFontPath();
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    com.google.protobuf.ByteString
        getFontPathBytes();

    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    java.lang.String getPngPath();
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    com.google.protobuf.ByteString
        getPngPathBytes();
  }
  /**
   * Protobuf type {@code echart.EChart_InvokeInit}
   */
  public  static final class EChart_InvokeInit extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeInit, EChart_InvokeInit.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_InvokeInit)
      EChart_InvokeInitOrBuilder {
    private EChart_InvokeInit() {
      dbFilename_ = "";
      mapPath_ = "";
      persistablePath_ = "";
      fontPath_ = "";
      pngPath_ = "";
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int DB_FILENAME_FIELD_NUMBER = 2;
    private java.lang.String dbFilename_;
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    public java.lang.String getDbFilename() {
      return dbFilename_;
    }
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDbFilenameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(dbFilename_);
    }
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    private void setDbFilename(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      dbFilename_ = value;
    }
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    private void clearDbFilename() {
      
      dbFilename_ = getDefaultInstance().getDbFilename();
    }
    /**
     * <pre>
     *数据库的文件名(包含绝对路径)
     * </pre>
     *
     * <code>optional string db_filename = 2;</code>
     */
    private void setDbFilenameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      dbFilename_ = value.toStringUtf8();
    }

    public static final int MAP_PATH_FIELD_NUMBER = 3;
    private java.lang.String mapPath_;
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    public java.lang.String getMapPath() {
      return mapPath_;
    }
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMapPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(mapPath_);
    }
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    private void setMapPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      mapPath_ = value;
    }
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    private void clearMapPath() {
      
      mapPath_ = getDefaultInstance().getMapPath();
    }
    /**
     * <pre>
     *海图文件的绝对路径
     * </pre>
     *
     * <code>optional string map_path = 3;</code>
     */
    private void setMapPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      mapPath_ = value.toStringUtf8();
    }

    public static final int PERSISTABLE_PATH_FIELD_NUMBER = 4;
    private java.lang.String persistablePath_;
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    public java.lang.String getPersistablePath() {
      return persistablePath_;
    }
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPersistablePathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(persistablePath_);
    }
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    private void setPersistablePath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      persistablePath_ = value;
    }
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    private void clearPersistablePath() {
      
      persistablePath_ = getDefaultInstance().getPersistablePath();
    }
    /**
     * <pre>
     *可持久化图层的绝对路径
     * </pre>
     *
     * <code>optional string persistable_path = 4;</code>
     */
    private void setPersistablePathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      persistablePath_ = value.toStringUtf8();
    }

    public static final int FONT_PATH_FIELD_NUMBER = 5;
    private java.lang.String fontPath_;
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    public java.lang.String getFontPath() {
      return fontPath_;
    }
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    public com.google.protobuf.ByteString
        getFontPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fontPath_);
    }
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    private void setFontPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fontPath_ = value;
    }
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    private void clearFontPath() {
      
      fontPath_ = getDefaultInstance().getFontPath();
    }
    /**
     * <pre>
     *truetype字体文件的绝对路径
     * </pre>
     *
     * <code>optional string font_path = 5;</code>
     */
    private void setFontPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      fontPath_ = value.toStringUtf8();
    }

    public static final int PNG_PATH_FIELD_NUMBER = 6;
    private java.lang.String pngPath_;
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    public java.lang.String getPngPath() {
      return pngPath_;
    }
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    public com.google.protobuf.ByteString
        getPngPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pngPath_);
    }
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    private void setPngPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pngPath_ = value;
    }
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    private void clearPngPath() {
      
      pngPath_ = getDefaultInstance().getPngPath();
    }
    /**
     * <pre>
     *png文件的绝对路径
     * </pre>
     *
     * <code>optional string png_path = 6;</code>
     */
    private void setPngPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pngPath_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (!dbFilename_.isEmpty()) {
        output.writeString(2, getDbFilename());
      }
      if (!mapPath_.isEmpty()) {
        output.writeString(3, getMapPath());
      }
      if (!persistablePath_.isEmpty()) {
        output.writeString(4, getPersistablePath());
      }
      if (!fontPath_.isEmpty()) {
        output.writeString(5, getFontPath());
      }
      if (!pngPath_.isEmpty()) {
        output.writeString(6, getPngPath());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (!dbFilename_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getDbFilename());
      }
      if (!mapPath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getMapPath());
      }
      if (!persistablePath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getPersistablePath());
      }
      if (!fontPath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getFontPath());
      }
      if (!pngPath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPngPath());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeInit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_InvokeInit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_InvokeInit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_InvokeInit, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_InvokeInit)
        com.ndk.echart.Echart.EChart_InvokeInitOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_InvokeInit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *数据库的文件名(包含绝对路径)
       * </pre>
       *
       * <code>optional string db_filename = 2;</code>
       */
      public java.lang.String getDbFilename() {
        return instance.getDbFilename();
      }
      /**
       * <pre>
       *数据库的文件名(包含绝对路径)
       * </pre>
       *
       * <code>optional string db_filename = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDbFilenameBytes() {
        return instance.getDbFilenameBytes();
      }
      /**
       * <pre>
       *数据库的文件名(包含绝对路径)
       * </pre>
       *
       * <code>optional string db_filename = 2;</code>
       */
      public Builder setDbFilename(
          java.lang.String value) {
        copyOnWrite();
        instance.setDbFilename(value);
        return this;
      }
      /**
       * <pre>
       *数据库的文件名(包含绝对路径)
       * </pre>
       *
       * <code>optional string db_filename = 2;</code>
       */
      public Builder clearDbFilename() {
        copyOnWrite();
        instance.clearDbFilename();
        return this;
      }
      /**
       * <pre>
       *数据库的文件名(包含绝对路径)
       * </pre>
       *
       * <code>optional string db_filename = 2;</code>
       */
      public Builder setDbFilenameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDbFilenameBytes(value);
        return this;
      }

      /**
       * <pre>
       *海图文件的绝对路径
       * </pre>
       *
       * <code>optional string map_path = 3;</code>
       */
      public java.lang.String getMapPath() {
        return instance.getMapPath();
      }
      /**
       * <pre>
       *海图文件的绝对路径
       * </pre>
       *
       * <code>optional string map_path = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMapPathBytes() {
        return instance.getMapPathBytes();
      }
      /**
       * <pre>
       *海图文件的绝对路径
       * </pre>
       *
       * <code>optional string map_path = 3;</code>
       */
      public Builder setMapPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setMapPath(value);
        return this;
      }
      /**
       * <pre>
       *海图文件的绝对路径
       * </pre>
       *
       * <code>optional string map_path = 3;</code>
       */
      public Builder clearMapPath() {
        copyOnWrite();
        instance.clearMapPath();
        return this;
      }
      /**
       * <pre>
       *海图文件的绝对路径
       * </pre>
       *
       * <code>optional string map_path = 3;</code>
       */
      public Builder setMapPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMapPathBytes(value);
        return this;
      }

      /**
       * <pre>
       *可持久化图层的绝对路径
       * </pre>
       *
       * <code>optional string persistable_path = 4;</code>
       */
      public java.lang.String getPersistablePath() {
        return instance.getPersistablePath();
      }
      /**
       * <pre>
       *可持久化图层的绝对路径
       * </pre>
       *
       * <code>optional string persistable_path = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPersistablePathBytes() {
        return instance.getPersistablePathBytes();
      }
      /**
       * <pre>
       *可持久化图层的绝对路径
       * </pre>
       *
       * <code>optional string persistable_path = 4;</code>
       */
      public Builder setPersistablePath(
          java.lang.String value) {
        copyOnWrite();
        instance.setPersistablePath(value);
        return this;
      }
      /**
       * <pre>
       *可持久化图层的绝对路径
       * </pre>
       *
       * <code>optional string persistable_path = 4;</code>
       */
      public Builder clearPersistablePath() {
        copyOnWrite();
        instance.clearPersistablePath();
        return this;
      }
      /**
       * <pre>
       *可持久化图层的绝对路径
       * </pre>
       *
       * <code>optional string persistable_path = 4;</code>
       */
      public Builder setPersistablePathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPersistablePathBytes(value);
        return this;
      }

      /**
       * <pre>
       *truetype字体文件的绝对路径
       * </pre>
       *
       * <code>optional string font_path = 5;</code>
       */
      public java.lang.String getFontPath() {
        return instance.getFontPath();
      }
      /**
       * <pre>
       *truetype字体文件的绝对路径
       * </pre>
       *
       * <code>optional string font_path = 5;</code>
       */
      public com.google.protobuf.ByteString
          getFontPathBytes() {
        return instance.getFontPathBytes();
      }
      /**
       * <pre>
       *truetype字体文件的绝对路径
       * </pre>
       *
       * <code>optional string font_path = 5;</code>
       */
      public Builder setFontPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setFontPath(value);
        return this;
      }
      /**
       * <pre>
       *truetype字体文件的绝对路径
       * </pre>
       *
       * <code>optional string font_path = 5;</code>
       */
      public Builder clearFontPath() {
        copyOnWrite();
        instance.clearFontPath();
        return this;
      }
      /**
       * <pre>
       *truetype字体文件的绝对路径
       * </pre>
       *
       * <code>optional string font_path = 5;</code>
       */
      public Builder setFontPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFontPathBytes(value);
        return this;
      }

      /**
       * <pre>
       *png文件的绝对路径
       * </pre>
       *
       * <code>optional string png_path = 6;</code>
       */
      public java.lang.String getPngPath() {
        return instance.getPngPath();
      }
      /**
       * <pre>
       *png文件的绝对路径
       * </pre>
       *
       * <code>optional string png_path = 6;</code>
       */
      public com.google.protobuf.ByteString
          getPngPathBytes() {
        return instance.getPngPathBytes();
      }
      /**
       * <pre>
       *png文件的绝对路径
       * </pre>
       *
       * <code>optional string png_path = 6;</code>
       */
      public Builder setPngPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setPngPath(value);
        return this;
      }
      /**
       * <pre>
       *png文件的绝对路径
       * </pre>
       *
       * <code>optional string png_path = 6;</code>
       */
      public Builder clearPngPath() {
        copyOnWrite();
        instance.clearPngPath();
        return this;
      }
      /**
       * <pre>
       *png文件的绝对路径
       * </pre>
       *
       * <code>optional string png_path = 6;</code>
       */
      public Builder setPngPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPngPathBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_InvokeInit)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_InvokeInit();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_InvokeInit other = (com.ndk.echart.Echart.EChart_InvokeInit) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          dbFilename_ = visitor.visitString(!dbFilename_.isEmpty(), dbFilename_,
              !other.dbFilename_.isEmpty(), other.dbFilename_);
          mapPath_ = visitor.visitString(!mapPath_.isEmpty(), mapPath_,
              !other.mapPath_.isEmpty(), other.mapPath_);
          persistablePath_ = visitor.visitString(!persistablePath_.isEmpty(), persistablePath_,
              !other.persistablePath_.isEmpty(), other.persistablePath_);
          fontPath_ = visitor.visitString(!fontPath_.isEmpty(), fontPath_,
              !other.fontPath_.isEmpty(), other.fontPath_);
          pngPath_ = visitor.visitString(!pngPath_.isEmpty(), pngPath_,
              !other.pngPath_.isEmpty(), other.pngPath_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  dbFilename_ = s;
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  mapPath_ = s;
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  persistablePath_ = s;
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  fontPath_ = s;
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  pngPath_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_InvokeInit.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_InvokeInit)
    private static final com.ndk.echart.Echart.EChart_InvokeInit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeInit();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_InvokeInit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeInit> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeInit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultInitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_ResultInit)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.EChart_ResultInit}
   */
  public  static final class EChart_ResultInit extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultInit, EChart_ResultInit.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_ResultInit)
      EChart_ResultInitOrBuilder {
    private EChart_ResultInit() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_INIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultInit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_ResultInit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_ResultInit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_ResultInit, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_ResultInit)
        com.ndk.echart.Echart.EChart_ResultInitOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_ResultInit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_INIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_ResultInit)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_ResultInit();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_ResultInit other = (com.ndk.echart.Echart.EChart_ResultInit) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_ResultInit.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_ResultInit)
    private static final com.ndk.echart.Echart.EChart_ResultInit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultInit();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_ResultInit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultInit> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultInit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeUninitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_InvokeUninit)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.EChart_InvokeUninit}
   */
  public  static final class EChart_InvokeUninit extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeUninit, EChart_InvokeUninit.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_InvokeUninit)
      EChart_InvokeUninitOrBuilder {
    private EChart_InvokeUninit() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_InvokeUninit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_InvokeUninit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_InvokeUninit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_InvokeUninit, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_InvokeUninit)
        com.ndk.echart.Echart.EChart_InvokeUninitOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_InvokeUninit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_InvokeUninit)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_InvokeUninit();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_InvokeUninit other = (com.ndk.echart.Echart.EChart_InvokeUninit) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_InvokeUninit.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_InvokeUninit)
    private static final com.ndk.echart.Echart.EChart_InvokeUninit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeUninit();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_InvokeUninit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeUninit> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeUninit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultUninitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_ResultUninit)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.EChart_ResultUninit}
   */
  public  static final class EChart_ResultUninit extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultUninit, EChart_ResultUninit.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_ResultUninit)
      EChart_ResultUninitOrBuilder {
    private EChart_ResultUninit() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_UNINIT
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_ResultUninit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_ResultUninit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_ResultUninit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_ResultUninit, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_ResultUninit)
        com.ndk.echart.Echart.EChart_ResultUninitOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_ResultUninit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_UNINIT
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_ResultUninit)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_ResultUninit();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_ResultUninit other = (com.ndk.echart.Echart.EChart_ResultUninit) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_ResultUninit.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_ResultUninit)
    private static final com.ndk.echart.Echart.EChart_ResultUninit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultUninit();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_ResultUninit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultUninit> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultUninit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ColorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_Color)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *红，0~255
     * </pre>
     *
     * <code>optional uint32 r = 1;</code>
     */
    int getR();

    /**
     * <pre>
     *绿，0~255
     * </pre>
     *
     * <code>optional uint32 g = 2;</code>
     */
    int getG();

    /**
     * <pre>
     *蓝，0~255
     * </pre>
     *
     * <code>optional uint32 b = 3;</code>
     */
    int getB();

    /**
     * <pre>
     *透明度，==0为不透明，==255为全透明
     * </pre>
     *
     * <code>optional uint32 a = 4;</code>
     */
    int getA();
  }
  /**
   * Protobuf type {@code echart.EChart_Color}
   */
  public  static final class EChart_Color extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_Color, EChart_Color.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_Color)
      EChart_ColorOrBuilder {
    private EChart_Color() {
    }
    public static final int R_FIELD_NUMBER = 1;
    private int r_;
    /**
     * <pre>
     *红，0~255
     * </pre>
     *
     * <code>optional uint32 r = 1;</code>
     */
    public int getR() {
      return r_;
    }
    /**
     * <pre>
     *红，0~255
     * </pre>
     *
     * <code>optional uint32 r = 1;</code>
     */
    private void setR(int value) {
      
      r_ = value;
    }
    /**
     * <pre>
     *红，0~255
     * </pre>
     *
     * <code>optional uint32 r = 1;</code>
     */
    private void clearR() {
      
      r_ = 0;
    }

    public static final int G_FIELD_NUMBER = 2;
    private int g_;
    /**
     * <pre>
     *绿，0~255
     * </pre>
     *
     * <code>optional uint32 g = 2;</code>
     */
    public int getG() {
      return g_;
    }
    /**
     * <pre>
     *绿，0~255
     * </pre>
     *
     * <code>optional uint32 g = 2;</code>
     */
    private void setG(int value) {
      
      g_ = value;
    }
    /**
     * <pre>
     *绿，0~255
     * </pre>
     *
     * <code>optional uint32 g = 2;</code>
     */
    private void clearG() {
      
      g_ = 0;
    }

    public static final int B_FIELD_NUMBER = 3;
    private int b_;
    /**
     * <pre>
     *蓝，0~255
     * </pre>
     *
     * <code>optional uint32 b = 3;</code>
     */
    public int getB() {
      return b_;
    }
    /**
     * <pre>
     *蓝，0~255
     * </pre>
     *
     * <code>optional uint32 b = 3;</code>
     */
    private void setB(int value) {
      
      b_ = value;
    }
    /**
     * <pre>
     *蓝，0~255
     * </pre>
     *
     * <code>optional uint32 b = 3;</code>
     */
    private void clearB() {
      
      b_ = 0;
    }

    public static final int A_FIELD_NUMBER = 4;
    private int a_;
    /**
     * <pre>
     *透明度，==0为不透明，==255为全透明
     * </pre>
     *
     * <code>optional uint32 a = 4;</code>
     */
    public int getA() {
      return a_;
    }
    /**
     * <pre>
     *透明度，==0为不透明，==255为全透明
     * </pre>
     *
     * <code>optional uint32 a = 4;</code>
     */
    private void setA(int value) {
      
      a_ = value;
    }
    /**
     * <pre>
     *透明度，==0为不透明，==255为全透明
     * </pre>
     *
     * <code>optional uint32 a = 4;</code>
     */
    private void clearA() {
      
      a_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (r_ != 0) {
        output.writeUInt32(1, r_);
      }
      if (g_ != 0) {
        output.writeUInt32(2, g_);
      }
      if (b_ != 0) {
        output.writeUInt32(3, b_);
      }
      if (a_ != 0) {
        output.writeUInt32(4, a_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (r_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, r_);
      }
      if (g_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, g_);
      }
      if (b_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, b_);
      }
      if (a_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, a_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Color parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Color parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Color parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_Color prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_Color}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_Color, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_Color)
        com.ndk.echart.Echart.EChart_ColorOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_Color.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *红，0~255
       * </pre>
       *
       * <code>optional uint32 r = 1;</code>
       */
      public int getR() {
        return instance.getR();
      }
      /**
       * <pre>
       *红，0~255
       * </pre>
       *
       * <code>optional uint32 r = 1;</code>
       */
      public Builder setR(int value) {
        copyOnWrite();
        instance.setR(value);
        return this;
      }
      /**
       * <pre>
       *红，0~255
       * </pre>
       *
       * <code>optional uint32 r = 1;</code>
       */
      public Builder clearR() {
        copyOnWrite();
        instance.clearR();
        return this;
      }

      /**
       * <pre>
       *绿，0~255
       * </pre>
       *
       * <code>optional uint32 g = 2;</code>
       */
      public int getG() {
        return instance.getG();
      }
      /**
       * <pre>
       *绿，0~255
       * </pre>
       *
       * <code>optional uint32 g = 2;</code>
       */
      public Builder setG(int value) {
        copyOnWrite();
        instance.setG(value);
        return this;
      }
      /**
       * <pre>
       *绿，0~255
       * </pre>
       *
       * <code>optional uint32 g = 2;</code>
       */
      public Builder clearG() {
        copyOnWrite();
        instance.clearG();
        return this;
      }

      /**
       * <pre>
       *蓝，0~255
       * </pre>
       *
       * <code>optional uint32 b = 3;</code>
       */
      public int getB() {
        return instance.getB();
      }
      /**
       * <pre>
       *蓝，0~255
       * </pre>
       *
       * <code>optional uint32 b = 3;</code>
       */
      public Builder setB(int value) {
        copyOnWrite();
        instance.setB(value);
        return this;
      }
      /**
       * <pre>
       *蓝，0~255
       * </pre>
       *
       * <code>optional uint32 b = 3;</code>
       */
      public Builder clearB() {
        copyOnWrite();
        instance.clearB();
        return this;
      }

      /**
       * <pre>
       *透明度，==0为不透明，==255为全透明
       * </pre>
       *
       * <code>optional uint32 a = 4;</code>
       */
      public int getA() {
        return instance.getA();
      }
      /**
       * <pre>
       *透明度，==0为不透明，==255为全透明
       * </pre>
       *
       * <code>optional uint32 a = 4;</code>
       */
      public Builder setA(int value) {
        copyOnWrite();
        instance.setA(value);
        return this;
      }
      /**
       * <pre>
       *透明度，==0为不透明，==255为全透明
       * </pre>
       *
       * <code>optional uint32 a = 4;</code>
       */
      public Builder clearA() {
        copyOnWrite();
        instance.clearA();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_Color)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_Color();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_Color other = (com.ndk.echart.Echart.EChart_Color) arg1;
          r_ = visitor.visitInt(r_ != 0, r_,
              other.r_ != 0, other.r_);
          g_ = visitor.visitInt(g_ != 0, g_,
              other.g_ != 0, other.g_);
          b_ = visitor.visitInt(b_ != 0, b_,
              other.b_ != 0, other.b_);
          a_ = visitor.visitInt(a_ != 0, a_,
              other.a_ != 0, other.a_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  r_ = input.readUInt32();
                  break;
                }
                case 16: {

                  g_ = input.readUInt32();
                  break;
                }
                case 24: {

                  b_ = input.readUInt32();
                  break;
                }
                case 32: {

                  a_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_Color.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_Color)
    private static final com.ndk.echart.Echart.EChart_Color DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_Color();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_Color getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_Color> PARSER;

    public static com.google.protobuf.Parser<EChart_Color> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_BrushOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_Brush)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    boolean hasColor();
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    com.ndk.echart.Echart.EChart_Color getColor();

    /**
     * <pre>
     *填充样式
     * </pre>
     *
     * <code>optional uint32 style = 2;</code>
     */
    int getStyle();
  }
  /**
   * Protobuf type {@code echart.EChart_Brush}
   */
  public  static final class EChart_Brush extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_Brush, EChart_Brush.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_Brush)
      EChart_BrushOrBuilder {
    private EChart_Brush() {
    }
    public static final int COLOR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_Color color_;
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    public boolean hasColor() {
      return color_ != null;
    }
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_Color getColor() {
      return color_ == null ? com.ndk.echart.Echart.EChart_Color.getDefaultInstance() : color_;
    }
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    private void setColor(com.ndk.echart.Echart.EChart_Color value) {
      if (value == null) {
        throw new NullPointerException();
      }
      color_ = value;
      
      }
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    private void setColor(
        com.ndk.echart.Echart.EChart_Color.Builder builderForValue) {
      color_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    private void mergeColor(com.ndk.echart.Echart.EChart_Color value) {
      if (color_ != null &&
          color_ != com.ndk.echart.Echart.EChart_Color.getDefaultInstance()) {
        color_ =
          com.ndk.echart.Echart.EChart_Color.newBuilder(color_).mergeFrom(value).buildPartial();
      } else {
        color_ = value;
      }
      
    }
    /**
     * <pre>
     *填充颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 1;</code>
     */
    private void clearColor() {  color_ = null;
      
    }

    public static final int STYLE_FIELD_NUMBER = 2;
    private int style_;
    /**
     * <pre>
     *填充样式
     * </pre>
     *
     * <code>optional uint32 style = 2;</code>
     */
    public int getStyle() {
      return style_;
    }
    /**
     * <pre>
     *填充样式
     * </pre>
     *
     * <code>optional uint32 style = 2;</code>
     */
    private void setStyle(int value) {
      
      style_ = value;
    }
    /**
     * <pre>
     *填充样式
     * </pre>
     *
     * <code>optional uint32 style = 2;</code>
     */
    private void clearStyle() {
      
      style_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (color_ != null) {
        output.writeMessage(1, getColor());
      }
      if (style_ != 0) {
        output.writeUInt32(2, style_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (color_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getColor());
      }
      if (style_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, style_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Brush parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_Brush prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_Brush}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_Brush, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_Brush)
        com.ndk.echart.Echart.EChart_BrushOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_Brush.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_Color getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public Builder setColor(com.ndk.echart.Echart.EChart_Color value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
        }
      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public Builder setColor(
          com.ndk.echart.Echart.EChart_Color.Builder builderForValue) {
        copyOnWrite();
        instance.setColor(builderForValue);
        return this;
      }
      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public Builder mergeColor(com.ndk.echart.Echart.EChart_Color value) {
        copyOnWrite();
        instance.mergeColor(value);
        return this;
      }
      /**
       * <pre>
       *填充颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 1;</code>
       */
      public Builder clearColor() {  copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       *填充样式
       * </pre>
       *
       * <code>optional uint32 style = 2;</code>
       */
      public int getStyle() {
        return instance.getStyle();
      }
      /**
       * <pre>
       *填充样式
       * </pre>
       *
       * <code>optional uint32 style = 2;</code>
       */
      public Builder setStyle(int value) {
        copyOnWrite();
        instance.setStyle(value);
        return this;
      }
      /**
       * <pre>
       *填充样式
       * </pre>
       *
       * <code>optional uint32 style = 2;</code>
       */
      public Builder clearStyle() {
        copyOnWrite();
        instance.clearStyle();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_Brush)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_Brush();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_Brush other = (com.ndk.echart.Echart.EChart_Brush) arg1;
          color_ = visitor.visitMessage(color_, other.color_);
          style_ = visitor.visitInt(style_ != 0, style_,
              other.style_ != 0, other.style_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_Color.Builder subBuilder = null;
                  if (color_ != null) {
                    subBuilder = color_.toBuilder();
                  }
                  color_ = input.readMessage(com.ndk.echart.Echart.EChart_Color.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(color_);
                    color_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  style_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_Brush.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_Brush)
    private static final com.ndk.echart.Echart.EChart_Brush DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_Brush();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_Brush getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_Brush> PARSER;

    public static com.google.protobuf.Parser<EChart_Brush> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_PenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_Pen)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *线宽
     * </pre>
     *
     * <code>optional uint32 width = 1;</code>
     */
    int getWidth();

    /**
     * <pre>
     *实线长度
     * </pre>
     *
     * <code>optional uint32 dash = 2;</code>
     */
    int getDash();

    /**
     * <pre>
     *间隔长度
     * </pre>
     *
     * <code>optional uint32 space = 3;</code>
     */
    int getSpace();

    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    boolean hasColor();
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    com.ndk.echart.Echart.EChart_Color getColor();
  }
  /**
   * Protobuf type {@code echart.EChart_Pen}
   */
  public  static final class EChart_Pen extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_Pen, EChart_Pen.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_Pen)
      EChart_PenOrBuilder {
    private EChart_Pen() {
    }
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <pre>
     *线宽
     * </pre>
     *
     * <code>optional uint32 width = 1;</code>
     */
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     *线宽
     * </pre>
     *
     * <code>optional uint32 width = 1;</code>
     */
    private void setWidth(int value) {
      
      width_ = value;
    }
    /**
     * <pre>
     *线宽
     * </pre>
     *
     * <code>optional uint32 width = 1;</code>
     */
    private void clearWidth() {
      
      width_ = 0;
    }

    public static final int DASH_FIELD_NUMBER = 2;
    private int dash_;
    /**
     * <pre>
     *实线长度
     * </pre>
     *
     * <code>optional uint32 dash = 2;</code>
     */
    public int getDash() {
      return dash_;
    }
    /**
     * <pre>
     *实线长度
     * </pre>
     *
     * <code>optional uint32 dash = 2;</code>
     */
    private void setDash(int value) {
      
      dash_ = value;
    }
    /**
     * <pre>
     *实线长度
     * </pre>
     *
     * <code>optional uint32 dash = 2;</code>
     */
    private void clearDash() {
      
      dash_ = 0;
    }

    public static final int SPACE_FIELD_NUMBER = 3;
    private int space_;
    /**
     * <pre>
     *间隔长度
     * </pre>
     *
     * <code>optional uint32 space = 3;</code>
     */
    public int getSpace() {
      return space_;
    }
    /**
     * <pre>
     *间隔长度
     * </pre>
     *
     * <code>optional uint32 space = 3;</code>
     */
    private void setSpace(int value) {
      
      space_ = value;
    }
    /**
     * <pre>
     *间隔长度
     * </pre>
     *
     * <code>optional uint32 space = 3;</code>
     */
    private void clearSpace() {
      
      space_ = 0;
    }

    public static final int COLOR_FIELD_NUMBER = 4;
    private com.ndk.echart.Echart.EChart_Color color_;
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    public boolean hasColor() {
      return color_ != null;
    }
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    public com.ndk.echart.Echart.EChart_Color getColor() {
      return color_ == null ? com.ndk.echart.Echart.EChart_Color.getDefaultInstance() : color_;
    }
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    private void setColor(com.ndk.echart.Echart.EChart_Color value) {
      if (value == null) {
        throw new NullPointerException();
      }
      color_ = value;
      
      }
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    private void setColor(
        com.ndk.echart.Echart.EChart_Color.Builder builderForValue) {
      color_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    private void mergeColor(com.ndk.echart.Echart.EChart_Color value) {
      if (color_ != null &&
          color_ != com.ndk.echart.Echart.EChart_Color.getDefaultInstance()) {
        color_ =
          com.ndk.echart.Echart.EChart_Color.newBuilder(color_).mergeFrom(value).buildPartial();
      } else {
        color_ = value;
      }
      
    }
    /**
     * <pre>
     *颜色
     * </pre>
     *
     * <code>optional .echart.EChart_Color color = 4;</code>
     */
    private void clearColor() {  color_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (width_ != 0) {
        output.writeUInt32(1, width_);
      }
      if (dash_ != 0) {
        output.writeUInt32(2, dash_);
      }
      if (space_ != 0) {
        output.writeUInt32(3, space_);
      }
      if (color_ != null) {
        output.writeMessage(4, getColor());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (width_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, width_);
      }
      if (dash_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, dash_);
      }
      if (space_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, space_);
      }
      if (color_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getColor());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Pen parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_Pen prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_Pen}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_Pen, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_Pen)
        com.ndk.echart.Echart.EChart_PenOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_Pen.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *线宽
       * </pre>
       *
       * <code>optional uint32 width = 1;</code>
       */
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       *线宽
       * </pre>
       *
       * <code>optional uint32 width = 1;</code>
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       *线宽
       * </pre>
       *
       * <code>optional uint32 width = 1;</code>
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       *实线长度
       * </pre>
       *
       * <code>optional uint32 dash = 2;</code>
       */
      public int getDash() {
        return instance.getDash();
      }
      /**
       * <pre>
       *实线长度
       * </pre>
       *
       * <code>optional uint32 dash = 2;</code>
       */
      public Builder setDash(int value) {
        copyOnWrite();
        instance.setDash(value);
        return this;
      }
      /**
       * <pre>
       *实线长度
       * </pre>
       *
       * <code>optional uint32 dash = 2;</code>
       */
      public Builder clearDash() {
        copyOnWrite();
        instance.clearDash();
        return this;
      }

      /**
       * <pre>
       *间隔长度
       * </pre>
       *
       * <code>optional uint32 space = 3;</code>
       */
      public int getSpace() {
        return instance.getSpace();
      }
      /**
       * <pre>
       *间隔长度
       * </pre>
       *
       * <code>optional uint32 space = 3;</code>
       */
      public Builder setSpace(int value) {
        copyOnWrite();
        instance.setSpace(value);
        return this;
      }
      /**
       * <pre>
       *间隔长度
       * </pre>
       *
       * <code>optional uint32 space = 3;</code>
       */
      public Builder clearSpace() {
        copyOnWrite();
        instance.clearSpace();
        return this;
      }

      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public com.ndk.echart.Echart.EChart_Color getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public Builder setColor(com.ndk.echart.Echart.EChart_Color value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
        }
      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public Builder setColor(
          com.ndk.echart.Echart.EChart_Color.Builder builderForValue) {
        copyOnWrite();
        instance.setColor(builderForValue);
        return this;
      }
      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public Builder mergeColor(com.ndk.echart.Echart.EChart_Color value) {
        copyOnWrite();
        instance.mergeColor(value);
        return this;
      }
      /**
       * <pre>
       *颜色
       * </pre>
       *
       * <code>optional .echart.EChart_Color color = 4;</code>
       */
      public Builder clearColor() {  copyOnWrite();
        instance.clearColor();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_Pen)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_Pen();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_Pen other = (com.ndk.echart.Echart.EChart_Pen) arg1;
          width_ = visitor.visitInt(width_ != 0, width_,
              other.width_ != 0, other.width_);
          dash_ = visitor.visitInt(dash_ != 0, dash_,
              other.dash_ != 0, other.dash_);
          space_ = visitor.visitInt(space_ != 0, space_,
              other.space_ != 0, other.space_);
          color_ = visitor.visitMessage(color_, other.color_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  width_ = input.readUInt32();
                  break;
                }
                case 16: {

                  dash_ = input.readUInt32();
                  break;
                }
                case 24: {

                  space_ = input.readUInt32();
                  break;
                }
                case 34: {
                  com.ndk.echart.Echart.EChart_Color.Builder subBuilder = null;
                  if (color_ != null) {
                    subBuilder = color_.toBuilder();
                  }
                  color_ = input.readMessage(com.ndk.echart.Echart.EChart_Color.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(color_);
                    color_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_Pen.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_Pen)
    private static final com.ndk.echart.Echart.EChart_Pen DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_Pen();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_Pen getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_Pen> PARSER;

    public static com.google.protobuf.Parser<EChart_Pen> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_FontOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_Font)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    int getFamilyValue();
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    com.ndk.echart.Echart.EChart_FontFamily getFamily();

    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>optional uint32 size = 2;</code>
     */
    int getSize();
  }
  /**
   * Protobuf type {@code echart.EChart_Font}
   */
  public  static final class EChart_Font extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_Font, EChart_Font.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_Font)
      EChart_FontOrBuilder {
    private EChart_Font() {
    }
    public static final int FAMILY_FIELD_NUMBER = 1;
    private int family_;
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    public int getFamilyValue() {
      return family_;
    }
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_FontFamily getFamily() {
      com.ndk.echart.Echart.EChart_FontFamily result = com.ndk.echart.Echart.EChart_FontFamily.forNumber(family_);
      return result == null ? com.ndk.echart.Echart.EChart_FontFamily.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    private void setFamilyValue(int value) {
        family_ = value;
    }
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    private void setFamily(com.ndk.echart.Echart.EChart_FontFamily value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      family_ = value.getNumber();
    }
    /**
     * <pre>
     *字型
     * </pre>
     *
     * <code>optional .echart.EChart_FontFamily family = 1;</code>
     */
    private void clearFamily() {
      
      family_ = 0;
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private int size_;
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>optional uint32 size = 2;</code>
     */
    public int getSize() {
      return size_;
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>optional uint32 size = 2;</code>
     */
    private void setSize(int value) {
      
      size_ = value;
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>optional uint32 size = 2;</code>
     */
    private void clearSize() {
      
      size_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (family_ != com.ndk.echart.Echart.EChart_FontFamily.FONT_FAMILY_SERIF.getNumber()) {
        output.writeEnum(1, family_);
      }
      if (size_ != 0) {
        output.writeUInt32(2, size_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (family_ != com.ndk.echart.Echart.EChart_FontFamily.FONT_FAMILY_SERIF.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, family_);
      }
      if (size_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, size_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Font parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Font parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Font parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_Font prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_Font}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_Font, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_Font)
        com.ndk.echart.Echart.EChart_FontOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_Font.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *字型
       * </pre>
       *
       * <code>optional .echart.EChart_FontFamily family = 1;</code>
       */
      public int getFamilyValue() {
        return instance.getFamilyValue();
      }
      /**
       * <pre>
       *字型
       * </pre>
       *
       * <code>optional .echart.EChart_FontFamily family = 1;</code>
       */
      public Builder setFamilyValue(int value) {
        copyOnWrite();
        instance.setFamilyValue(value);
        return this;
      }
      /**
       * <pre>
       *字型
       * </pre>
       *
       * <code>optional .echart.EChart_FontFamily family = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_FontFamily getFamily() {
        return instance.getFamily();
      }
      /**
       * <pre>
       *字型
       * </pre>
       *
       * <code>optional .echart.EChart_FontFamily family = 1;</code>
       */
      public Builder setFamily(com.ndk.echart.Echart.EChart_FontFamily value) {
        copyOnWrite();
        instance.setFamily(value);
        return this;
      }
      /**
       * <pre>
       *字型
       * </pre>
       *
       * <code>optional .echart.EChart_FontFamily family = 1;</code>
       */
      public Builder clearFamily() {
        copyOnWrite();
        instance.clearFamily();
        return this;
      }

      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       */
      public int getSize() {
        return instance.getSize();
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       */
      public Builder setSize(int value) {
        copyOnWrite();
        instance.setSize(value);
        return this;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       */
      public Builder clearSize() {
        copyOnWrite();
        instance.clearSize();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_Font)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_Font();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_Font other = (com.ndk.echart.Echart.EChart_Font) arg1;
          family_ = visitor.visitInt(family_ != 0, family_,    other.family_ != 0, other.family_);
          size_ = visitor.visitInt(size_ != 0, size_,
              other.size_ != 0, other.size_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  family_ = rawValue;
                  break;
                }
                case 16: {

                  size_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_Font.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_Font)
    private static final com.ndk.echart.Echart.EChart_Font DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_Font();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_Font getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_Font> PARSER;

    public static com.google.protobuf.Parser<EChart_Font> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_GeoPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_GeoPoint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional double x = 1;</code>
     */
    double getX();

    /**
     * <code>optional double y = 2;</code>
     */
    double getY();
  }
  /**
   * Protobuf type {@code echart.EChart_GeoPoint}
   */
  public  static final class EChart_GeoPoint extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_GeoPoint, EChart_GeoPoint.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_GeoPoint)
      EChart_GeoPointOrBuilder {
    private EChart_GeoPoint() {
    }
    public static final int X_FIELD_NUMBER = 1;
    private double x_;
    /**
     * <code>optional double x = 1;</code>
     */
    public double getX() {
      return x_;
    }
    /**
     * <code>optional double x = 1;</code>
     */
    private void setX(double value) {
      
      x_ = value;
    }
    /**
     * <code>optional double x = 1;</code>
     */
    private void clearX() {
      
      x_ = 0D;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_;
    /**
     * <code>optional double y = 2;</code>
     */
    public double getY() {
      return y_;
    }
    /**
     * <code>optional double y = 2;</code>
     */
    private void setY(double value) {
      
      y_ = value;
    }
    /**
     * <code>optional double y = 2;</code>
     */
    private void clearY() {
      
      y_ = 0D;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (x_ != 0D) {
        output.writeDouble(1, x_);
      }
      if (y_ != 0D) {
        output.writeDouble(2, y_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (x_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (y_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_GeoPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_GeoPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_GeoPoint, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_GeoPoint)
        com.ndk.echart.Echart.EChart_GeoPointOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_GeoPoint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional double x = 1;</code>
       */
      public double getX() {
        return instance.getX();
      }
      /**
       * <code>optional double x = 1;</code>
       */
      public Builder setX(double value) {
        copyOnWrite();
        instance.setX(value);
        return this;
      }
      /**
       * <code>optional double x = 1;</code>
       */
      public Builder clearX() {
        copyOnWrite();
        instance.clearX();
        return this;
      }

      /**
       * <code>optional double y = 2;</code>
       */
      public double getY() {
        return instance.getY();
      }
      /**
       * <code>optional double y = 2;</code>
       */
      public Builder setY(double value) {
        copyOnWrite();
        instance.setY(value);
        return this;
      }
      /**
       * <code>optional double y = 2;</code>
       */
      public Builder clearY() {
        copyOnWrite();
        instance.clearY();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_GeoPoint)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_GeoPoint();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_GeoPoint other = (com.ndk.echart.Echart.EChart_GeoPoint) arg1;
          x_ = visitor.visitDouble(x_ != 0D, x_,
              other.x_ != 0D, other.x_);
          y_ = visitor.visitDouble(y_ != 0D, y_,
              other.y_ != 0D, other.y_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 9: {

                  x_ = input.readDouble();
                  break;
                }
                case 17: {

                  y_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_GeoPoint.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_GeoPoint)
    private static final com.ndk.echart.Echart.EChart_GeoPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_GeoPoint();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_GeoPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_GeoPoint> PARSER;

    public static com.google.protobuf.Parser<EChart_GeoPoint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_GeoLineStringOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_GeoLineString)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> 
        getPtsList();
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    com.ndk.echart.Echart.EChart_GeoPoint getPts(int index);
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    int getPtsCount();
  }
  /**
   * <pre>
   *必须是不闭合曲线
   * </pre>
   *
   * Protobuf type {@code echart.EChart_GeoLineString}
   */
  public  static final class EChart_GeoLineString extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_GeoLineString, EChart_GeoLineString.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_GeoLineString)
      EChart_GeoLineStringOrBuilder {
    private EChart_GeoLineString() {
      pts_ = emptyProtobufList();
    }
    public static final int PTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.ndk.echart.Echart.EChart_GeoPoint> pts_;
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> getPtsList() {
      return pts_;
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public java.util.List<? extends com.ndk.echart.Echart.EChart_GeoPointOrBuilder> 
        getPtsOrBuilderList() {
      return pts_;
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public int getPtsCount() {
      return pts_.size();
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPoint getPts(int index) {
      return pts_.get(index);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPointOrBuilder getPtsOrBuilder(
        int index) {
      return pts_.get(index);
    }
    private void ensurePtsIsMutable() {
      if (!pts_.isModifiable()) {
        pts_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pts_);
       }
    }

    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void setPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.set(index, value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void setPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.add(value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.add(index, value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.add(builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addAllPts(
        java.lang.Iterable<? extends com.ndk.echart.Echart.EChart_GeoPoint> values) {
      ensurePtsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pts_);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void clearPts() {
      pts_ = emptyProtobufList();
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void removePts(int index) {
      ensurePtsIsMutable();
      pts_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < pts_.size(); i++) {
        output.writeMessage(1, pts_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pts_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoLineString parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_GeoLineString prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *必须是不闭合曲线
     * </pre>
     *
     * Protobuf type {@code echart.EChart_GeoLineString}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_GeoLineString, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_GeoLineString)
        com.ndk.echart.Echart.EChart_GeoLineStringOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_GeoLineString.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> getPtsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPtsList());
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public int getPtsCount() {
        return instance.getPtsCount();
      }/**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoPoint getPts(int index) {
        return instance.getPts(index);
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder setPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.setPts(index, value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder setPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setPts(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.addPts(value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.addPts(index, value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.addPts(builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.addPts(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addAllPts(
          java.lang.Iterable<? extends com.ndk.echart.Echart.EChart_GeoPoint> values) {
        copyOnWrite();
        instance.addAllPts(values);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder clearPts() {
        copyOnWrite();
        instance.clearPts();
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder removePts(int index) {
        copyOnWrite();
        instance.removePts(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_GeoLineString)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_GeoLineString();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pts_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_GeoLineString other = (com.ndk.echart.Echart.EChart_GeoLineString) arg1;
          pts_= visitor.visitList(pts_, other.pts_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!pts_.isModifiable()) {
                    pts_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pts_);
                  }
                  pts_.add(
                      input.readMessage(com.ndk.echart.Echart.EChart_GeoPoint.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_GeoLineString.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_GeoLineString)
    private static final com.ndk.echart.Echart.EChart_GeoLineString DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_GeoLineString();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_GeoLineString getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_GeoLineString> PARSER;

    public static com.google.protobuf.Parser<EChart_GeoLineString> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_GeoPolygonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_GeoPolygon)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> 
        getPtsList();
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    com.ndk.echart.Echart.EChart_GeoPoint getPts(int index);
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    int getPtsCount();
  }
  /**
   * <pre>
   *必须是闭合曲线
   * </pre>
   *
   * Protobuf type {@code echart.EChart_GeoPolygon}
   */
  public  static final class EChart_GeoPolygon extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_GeoPolygon, EChart_GeoPolygon.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_GeoPolygon)
      EChart_GeoPolygonOrBuilder {
    private EChart_GeoPolygon() {
      pts_ = emptyProtobufList();
    }
    public static final int PTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.ndk.echart.Echart.EChart_GeoPoint> pts_;
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> getPtsList() {
      return pts_;
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public java.util.List<? extends com.ndk.echart.Echart.EChart_GeoPointOrBuilder> 
        getPtsOrBuilderList() {
      return pts_;
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public int getPtsCount() {
      return pts_.size();
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPoint getPts(int index) {
      return pts_.get(index);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPointOrBuilder getPtsOrBuilder(
        int index) {
      return pts_.get(index);
    }
    private void ensurePtsIsMutable() {
      if (!pts_.isModifiable()) {
        pts_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pts_);
       }
    }

    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void setPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.set(index, value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void setPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.add(value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePtsIsMutable();
      pts_.add(index, value);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.add(builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addPts(
        int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      ensurePtsIsMutable();
      pts_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void addAllPts(
        java.lang.Iterable<? extends com.ndk.echart.Echart.EChart_GeoPoint> values) {
      ensurePtsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pts_);
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void clearPts() {
      pts_ = emptyProtobufList();
    }
    /**
     * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
     */
    private void removePts(int index) {
      ensurePtsIsMutable();
      pts_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < pts_.size(); i++) {
        output.writeMessage(1, pts_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pts_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_GeoPolygon parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_GeoPolygon prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *必须是闭合曲线
     * </pre>
     *
     * Protobuf type {@code echart.EChart_GeoPolygon}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_GeoPolygon, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_GeoPolygon)
        com.ndk.echart.Echart.EChart_GeoPolygonOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_GeoPolygon.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public java.util.List<com.ndk.echart.Echart.EChart_GeoPoint> getPtsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPtsList());
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public int getPtsCount() {
        return instance.getPtsCount();
      }/**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoPoint getPts(int index) {
        return instance.getPts(index);
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder setPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.setPts(index, value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder setPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setPts(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.addPts(value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.addPts(index, value);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.addPts(builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addPts(
          int index, com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.addPts(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder addAllPts(
          java.lang.Iterable<? extends com.ndk.echart.Echart.EChart_GeoPoint> values) {
        copyOnWrite();
        instance.addAllPts(values);
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder clearPts() {
        copyOnWrite();
        instance.clearPts();
        return this;
      }
      /**
       * <code>repeated .echart.EChart_GeoPoint pts = 1;</code>
       */
      public Builder removePts(int index) {
        copyOnWrite();
        instance.removePts(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_GeoPolygon)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_GeoPolygon();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pts_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_GeoPolygon other = (com.ndk.echart.Echart.EChart_GeoPolygon) arg1;
          pts_= visitor.visitList(pts_, other.pts_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!pts_.isModifiable()) {
                    pts_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pts_);
                  }
                  pts_.add(
                      input.readMessage(com.ndk.echart.Echart.EChart_GeoPoint.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_GeoPolygon.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_GeoPolygon)
    private static final com.ndk.echart.Echart.EChart_GeoPolygon DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_GeoPolygon();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_GeoPolygon getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_GeoPolygon> PARSER;

    public static com.google.protobuf.Parser<EChart_GeoPolygon> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_GeometryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.EChart_Geometry)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    int getTypeValue();
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    com.ndk.echart.Echart.EChart_GeoType getType();

    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    boolean hasPoint();
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    com.ndk.echart.Echart.EChart_GeoPoint getPoint();

    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    boolean hasLinestring();
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    com.ndk.echart.Echart.EChart_GeoLineString getLinestring();

    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    boolean hasPolygon();
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    com.ndk.echart.Echart.EChart_GeoPolygon getPolygon();
  }
  /**
   * Protobuf type {@code echart.EChart_Geometry}
   */
  public  static final class EChart_Geometry extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_Geometry, EChart_Geometry.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.EChart_Geometry)
      EChart_GeometryOrBuilder {
    private EChart_Geometry() {
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoType getType() {
      com.ndk.echart.Echart.EChart_GeoType result = com.ndk.echart.Echart.EChart_GeoType.forNumber(type_);
      return result == null ? com.ndk.echart.Echart.EChart_GeoType.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    private void setType(com.ndk.echart.Echart.EChart_GeoType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <code>optional .echart.EChart_GeoType type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int POINT_FIELD_NUMBER = 2;
    private com.ndk.echart.Echart.EChart_GeoPoint point_;
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    public boolean hasPoint() {
      return point_ != null;
    }
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPoint getPoint() {
      return point_ == null ? com.ndk.echart.Echart.EChart_GeoPoint.getDefaultInstance() : point_;
    }
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    private void setPoint(com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      point_ = value;
      
      }
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    private void setPoint(
        com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
      point_ = builderForValue.build();
      
    }
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    private void mergePoint(com.ndk.echart.Echart.EChart_GeoPoint value) {
      if (point_ != null &&
          point_ != com.ndk.echart.Echart.EChart_GeoPoint.getDefaultInstance()) {
        point_ =
          com.ndk.echart.Echart.EChart_GeoPoint.newBuilder(point_).mergeFrom(value).buildPartial();
      } else {
        point_ = value;
      }
      
    }
    /**
     * <code>optional .echart.EChart_GeoPoint point = 2;</code>
     */
    private void clearPoint() {  point_ = null;
      
    }

    public static final int LINESTRING_FIELD_NUMBER = 3;
    private com.ndk.echart.Echart.EChart_GeoLineString linestring_;
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    public boolean hasLinestring() {
      return linestring_ != null;
    }
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoLineString getLinestring() {
      return linestring_ == null ? com.ndk.echart.Echart.EChart_GeoLineString.getDefaultInstance() : linestring_;
    }
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    private void setLinestring(com.ndk.echart.Echart.EChart_GeoLineString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      linestring_ = value;
      
      }
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    private void setLinestring(
        com.ndk.echart.Echart.EChart_GeoLineString.Builder builderForValue) {
      linestring_ = builderForValue.build();
      
    }
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    private void mergeLinestring(com.ndk.echart.Echart.EChart_GeoLineString value) {
      if (linestring_ != null &&
          linestring_ != com.ndk.echart.Echart.EChart_GeoLineString.getDefaultInstance()) {
        linestring_ =
          com.ndk.echart.Echart.EChart_GeoLineString.newBuilder(linestring_).mergeFrom(value).buildPartial();
      } else {
        linestring_ = value;
      }
      
    }
    /**
     * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
     */
    private void clearLinestring() {  linestring_ = null;
      
    }

    public static final int POLYGON_FIELD_NUMBER = 4;
    private com.ndk.echart.Echart.EChart_GeoPolygon polygon_;
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    public boolean hasPolygon() {
      return polygon_ != null;
    }
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    public com.ndk.echart.Echart.EChart_GeoPolygon getPolygon() {
      return polygon_ == null ? com.ndk.echart.Echart.EChart_GeoPolygon.getDefaultInstance() : polygon_;
    }
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    private void setPolygon(com.ndk.echart.Echart.EChart_GeoPolygon value) {
      if (value == null) {
        throw new NullPointerException();
      }
      polygon_ = value;
      
      }
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    private void setPolygon(
        com.ndk.echart.Echart.EChart_GeoPolygon.Builder builderForValue) {
      polygon_ = builderForValue.build();
      
    }
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    private void mergePolygon(com.ndk.echart.Echart.EChart_GeoPolygon value) {
      if (polygon_ != null &&
          polygon_ != com.ndk.echart.Echart.EChart_GeoPolygon.getDefaultInstance()) {
        polygon_ =
          com.ndk.echart.Echart.EChart_GeoPolygon.newBuilder(polygon_).mergeFrom(value).buildPartial();
      } else {
        polygon_ = value;
      }
      
    }
    /**
     * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
     */
    private void clearPolygon() {  polygon_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.ndk.echart.Echart.EChart_GeoType.GEO_TYPE_NULL.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (point_ != null) {
        output.writeMessage(2, getPoint());
      }
      if (linestring_ != null) {
        output.writeMessage(3, getLinestring());
      }
      if (polygon_ != null) {
        output.writeMessage(4, getPolygon());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.ndk.echart.Echart.EChart_GeoType.GEO_TYPE_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (point_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPoint());
      }
      if (linestring_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLinestring());
      }
      if (polygon_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getPolygon());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.Echart.EChart_Geometry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.Echart.EChart_Geometry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.EChart_Geometry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.Echart.EChart_Geometry, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.EChart_Geometry)
        com.ndk.echart.Echart.EChart_GeometryOrBuilder {
      // Construct using com.ndk.echart.Echart.EChart_Geometry.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .echart.EChart_GeoType type = 1;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <code>optional .echart.EChart_GeoType type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoType type = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoType getType() {
        return instance.getType();
      }
      /**
       * <code>optional .echart.EChart_GeoType type = 1;</code>
       */
      public Builder setType(com.ndk.echart.Echart.EChart_GeoType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoType type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public boolean hasPoint() {
        return instance.hasPoint();
      }
      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoPoint getPoint() {
        return instance.getPoint();
      }
      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public Builder setPoint(com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.setPoint(value);
        return this;
        }
      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public Builder setPoint(
          com.ndk.echart.Echart.EChart_GeoPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setPoint(builderForValue);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public Builder mergePoint(com.ndk.echart.Echart.EChart_GeoPoint value) {
        copyOnWrite();
        instance.mergePoint(value);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoPoint point = 2;</code>
       */
      public Builder clearPoint() {  copyOnWrite();
        instance.clearPoint();
        return this;
      }

      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public boolean hasLinestring() {
        return instance.hasLinestring();
      }
      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoLineString getLinestring() {
        return instance.getLinestring();
      }
      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public Builder setLinestring(com.ndk.echart.Echart.EChart_GeoLineString value) {
        copyOnWrite();
        instance.setLinestring(value);
        return this;
        }
      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public Builder setLinestring(
          com.ndk.echart.Echart.EChart_GeoLineString.Builder builderForValue) {
        copyOnWrite();
        instance.setLinestring(builderForValue);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public Builder mergeLinestring(com.ndk.echart.Echart.EChart_GeoLineString value) {
        copyOnWrite();
        instance.mergeLinestring(value);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoLineString linestring = 3;</code>
       */
      public Builder clearLinestring() {  copyOnWrite();
        instance.clearLinestring();
        return this;
      }

      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public boolean hasPolygon() {
        return instance.hasPolygon();
      }
      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public com.ndk.echart.Echart.EChart_GeoPolygon getPolygon() {
        return instance.getPolygon();
      }
      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public Builder setPolygon(com.ndk.echart.Echart.EChart_GeoPolygon value) {
        copyOnWrite();
        instance.setPolygon(value);
        return this;
        }
      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public Builder setPolygon(
          com.ndk.echart.Echart.EChart_GeoPolygon.Builder builderForValue) {
        copyOnWrite();
        instance.setPolygon(builderForValue);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public Builder mergePolygon(com.ndk.echart.Echart.EChart_GeoPolygon value) {
        copyOnWrite();
        instance.mergePolygon(value);
        return this;
      }
      /**
       * <code>optional .echart.EChart_GeoPolygon polygon = 4;</code>
       */
      public Builder clearPolygon() {  copyOnWrite();
        instance.clearPolygon();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.EChart_Geometry)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.Echart.EChart_Geometry();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.Echart.EChart_Geometry other = (com.ndk.echart.Echart.EChart_Geometry) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          point_ = visitor.visitMessage(point_, other.point_);
          linestring_ = visitor.visitMessage(linestring_, other.linestring_);
          polygon_ = visitor.visitMessage(polygon_, other.polygon_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 18: {
                  com.ndk.echart.Echart.EChart_GeoPoint.Builder subBuilder = null;
                  if (point_ != null) {
                    subBuilder = point_.toBuilder();
                  }
                  point_ = input.readMessage(com.ndk.echart.Echart.EChart_GeoPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(point_);
                    point_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 26: {
                  com.ndk.echart.Echart.EChart_GeoLineString.Builder subBuilder = null;
                  if (linestring_ != null) {
                    subBuilder = linestring_.toBuilder();
                  }
                  linestring_ = input.readMessage(com.ndk.echart.Echart.EChart_GeoLineString.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(linestring_);
                    linestring_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {
                  com.ndk.echart.Echart.EChart_GeoPolygon.Builder subBuilder = null;
                  if (polygon_ != null) {
                    subBuilder = polygon_.toBuilder();
                  }
                  polygon_ = input.readMessage(com.ndk.echart.Echart.EChart_GeoPolygon.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(polygon_);
                    polygon_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.Echart.EChart_Geometry.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.EChart_Geometry)
    private static final com.ndk.echart.Echart.EChart_Geometry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_Geometry();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.Echart.EChart_Geometry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_Geometry> PARSER;

    public static com.google.protobuf.Parser<EChart_Geometry> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
