// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echart.mapview.proto

package com.ndk.echart;

public final class EchartMapview {
  private EchartMapview() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface EChart_InvokeMapViewCreateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewCreate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *可显示的最大宽度
     * </pre>
     *
     * <code>optional uint32 max_width = 2;</code>
     */
    int getMaxWidth();

    /**
     * <pre>
     *可显示的最大高度
     * </pre>
     *
     * <code>optional uint32 max_height = 3;</code>
     */
    int getMaxHeight();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewCreate}
   */
  public  static final class EChart_InvokeMapViewCreate extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewCreate, EChart_InvokeMapViewCreate.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewCreate)
      EChart_InvokeMapViewCreateOrBuilder {
    private EChart_InvokeMapViewCreate() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAX_WIDTH_FIELD_NUMBER = 2;
    private int maxWidth_;
    /**
     * <pre>
     *可显示的最大宽度
     * </pre>
     *
     * <code>optional uint32 max_width = 2;</code>
     */
    public int getMaxWidth() {
      return maxWidth_;
    }
    /**
     * <pre>
     *可显示的最大宽度
     * </pre>
     *
     * <code>optional uint32 max_width = 2;</code>
     */
    private void setMaxWidth(int value) {
      
      maxWidth_ = value;
    }
    /**
     * <pre>
     *可显示的最大宽度
     * </pre>
     *
     * <code>optional uint32 max_width = 2;</code>
     */
    private void clearMaxWidth() {
      
      maxWidth_ = 0;
    }

    public static final int MAX_HEIGHT_FIELD_NUMBER = 3;
    private int maxHeight_;
    /**
     * <pre>
     *可显示的最大高度
     * </pre>
     *
     * <code>optional uint32 max_height = 3;</code>
     */
    public int getMaxHeight() {
      return maxHeight_;
    }
    /**
     * <pre>
     *可显示的最大高度
     * </pre>
     *
     * <code>optional uint32 max_height = 3;</code>
     */
    private void setMaxHeight(int value) {
      
      maxHeight_ = value;
    }
    /**
     * <pre>
     *可显示的最大高度
     * </pre>
     *
     * <code>optional uint32 max_height = 3;</code>
     */
    private void clearMaxHeight() {
      
      maxHeight_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (maxWidth_ != 0) {
        output.writeUInt32(2, maxWidth_);
      }
      if (maxHeight_ != 0) {
        output.writeUInt32(3, maxHeight_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (maxWidth_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, maxWidth_);
      }
      if (maxHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxHeight_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewCreate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewCreate)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreateOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *可显示的最大宽度
       * </pre>
       *
       * <code>optional uint32 max_width = 2;</code>
       */
      public int getMaxWidth() {
        return instance.getMaxWidth();
      }
      /**
       * <pre>
       *可显示的最大宽度
       * </pre>
       *
       * <code>optional uint32 max_width = 2;</code>
       */
      public Builder setMaxWidth(int value) {
        copyOnWrite();
        instance.setMaxWidth(value);
        return this;
      }
      /**
       * <pre>
       *可显示的最大宽度
       * </pre>
       *
       * <code>optional uint32 max_width = 2;</code>
       */
      public Builder clearMaxWidth() {
        copyOnWrite();
        instance.clearMaxWidth();
        return this;
      }

      /**
       * <pre>
       *可显示的最大高度
       * </pre>
       *
       * <code>optional uint32 max_height = 3;</code>
       */
      public int getMaxHeight() {
        return instance.getMaxHeight();
      }
      /**
       * <pre>
       *可显示的最大高度
       * </pre>
       *
       * <code>optional uint32 max_height = 3;</code>
       */
      public Builder setMaxHeight(int value) {
        copyOnWrite();
        instance.setMaxHeight(value);
        return this;
      }
      /**
       * <pre>
       *可显示的最大高度
       * </pre>
       *
       * <code>optional uint32 max_height = 3;</code>
       */
      public Builder clearMaxHeight() {
        copyOnWrite();
        instance.clearMaxHeight();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewCreate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          maxWidth_ = visitor.visitInt(maxWidth_ != 0, maxWidth_,
              other.maxWidth_ != 0, other.maxWidth_);
          maxHeight_ = visitor.visitInt(maxHeight_ != 0, maxHeight_,
              other.maxHeight_ != 0, other.maxHeight_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  maxWidth_ = input.readUInt32();
                  break;
                }
                case 24: {

                  maxHeight_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewCreate)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewCreate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewCreate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewCreate> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewCreate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewCreateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewCreate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *显示缓冲区的大小		
     * </pre>
     *
     * <code>optional uint32 buffer_size = 3;</code>
     */
    int getBufferSize();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewCreate}
   */
  public  static final class EChart_ResultMapViewCreate extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewCreate, EChart_ResultMapViewCreate.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewCreate)
      EChart_ResultMapViewCreateOrBuilder {
    private EChart_ResultMapViewCreate() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_CREATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int BUFFER_SIZE_FIELD_NUMBER = 3;
    private int bufferSize_;
    /**
     * <pre>
     *显示缓冲区的大小		
     * </pre>
     *
     * <code>optional uint32 buffer_size = 3;</code>
     */
    public int getBufferSize() {
      return bufferSize_;
    }
    /**
     * <pre>
     *显示缓冲区的大小		
     * </pre>
     *
     * <code>optional uint32 buffer_size = 3;</code>
     */
    private void setBufferSize(int value) {
      
      bufferSize_ = value;
    }
    /**
     * <pre>
     *显示缓冲区的大小		
     * </pre>
     *
     * <code>optional uint32 buffer_size = 3;</code>
     */
    private void clearBufferSize() {
      
      bufferSize_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (bufferSize_ != 0) {
        output.writeUInt32(3, bufferSize_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (bufferSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bufferSize_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewCreate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewCreate)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewCreateOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_CREATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *显示缓冲区的大小		
       * </pre>
       *
       * <code>optional uint32 buffer_size = 3;</code>
       */
      public int getBufferSize() {
        return instance.getBufferSize();
      }
      /**
       * <pre>
       *显示缓冲区的大小		
       * </pre>
       *
       * <code>optional uint32 buffer_size = 3;</code>
       */
      public Builder setBufferSize(int value) {
        copyOnWrite();
        instance.setBufferSize(value);
        return this;
      }
      /**
       * <pre>
       *显示缓冲区的大小		
       * </pre>
       *
       * <code>optional uint32 buffer_size = 3;</code>
       */
      public Builder clearBufferSize() {
        copyOnWrite();
        instance.clearBufferSize();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewCreate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          bufferSize_ = visitor.visitInt(bufferSize_ != 0, bufferSize_,
              other.bufferSize_ != 0, other.bufferSize_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  bufferSize_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewCreate)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewCreate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewCreate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewCreate> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewCreate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewDestroyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewDestroy)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id	
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewDestroy}
   */
  public  static final class EChart_InvokeMapViewDestroy extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewDestroy, EChart_InvokeMapViewDestroy.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewDestroy)
      EChart_InvokeMapViewDestroyOrBuilder {
    private EChart_InvokeMapViewDestroy() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id	
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id	
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id	
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewDestroy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewDestroy)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroyOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id	
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id	
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id	
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewDestroy)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewDestroy)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewDestroy();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDestroy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewDestroy> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewDestroy> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewDestroyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewDestroy)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewDestroy}
   */
  public  static final class EChart_ResultMapViewDestroy extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewDestroy, EChart_ResultMapViewDestroy.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewDestroy)
      EChart_ResultMapViewDestroyOrBuilder {
    private EChart_ResultMapViewDestroy() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DESTROY
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewDestroy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewDestroy)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroyOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DESTROY
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewDestroy)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewDestroy)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewDestroy();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDestroy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewDestroy> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewDestroy> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetScaleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetScale)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetScale}
   */
  public  static final class EChart_InvokeMapViewGetScale extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetScale, EChart_InvokeMapViewGetScale.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetScale)
      EChart_InvokeMapViewGetScaleOrBuilder {
    private EChart_InvokeMapViewGetScale() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetScale}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetScale)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScaleOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetScale)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetScale)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetScale();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScale getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetScale> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetScale> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetScaleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetScale)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *比例尺，如1:10000，则scale=10000
     * </pre>
     *
     * <code>optional uint32 scale = 2;</code>
     */
    int getScale();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetScale}
   */
  public  static final class EChart_ResultMapViewGetScale extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetScale, EChart_ResultMapViewGetScale.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetScale)
      EChart_ResultMapViewGetScaleOrBuilder {
    private EChart_ResultMapViewGetScale() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int SCALE_FIELD_NUMBER = 2;
    private int scale_;
    /**
     * <pre>
     *比例尺，如1:10000，则scale=10000
     * </pre>
     *
     * <code>optional uint32 scale = 2;</code>
     */
    public int getScale() {
      return scale_;
    }
    /**
     * <pre>
     *比例尺，如1:10000，则scale=10000
     * </pre>
     *
     * <code>optional uint32 scale = 2;</code>
     */
    private void setScale(int value) {
      
      scale_ = value;
    }
    /**
     * <pre>
     *比例尺，如1:10000，则scale=10000
     * </pre>
     *
     * <code>optional uint32 scale = 2;</code>
     */
    private void clearScale() {
      
      scale_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (scale_ != 0) {
        output.writeUInt32(2, scale_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (scale_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, scale_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetScale}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetScale)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScaleOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *比例尺，如1:10000，则scale=10000
       * </pre>
       *
       * <code>optional uint32 scale = 2;</code>
       */
      public int getScale() {
        return instance.getScale();
      }
      /**
       * <pre>
       *比例尺，如1:10000，则scale=10000
       * </pre>
       *
       * <code>optional uint32 scale = 2;</code>
       */
      public Builder setScale(int value) {
        copyOnWrite();
        instance.setScale(value);
        return this;
      }
      /**
       * <pre>
       *比例尺，如1:10000，则scale=10000
       * </pre>
       *
       * <code>optional uint32 scale = 2;</code>
       */
      public Builder clearScale() {
        copyOnWrite();
        instance.clearScale();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetScale)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          scale_ = visitor.visitInt(scale_ != 0, scale_,
              other.scale_ != 0, other.scale_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  scale_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetScale)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetScale();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScale getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetScale> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetScale> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetScaleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetScale)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *比例尺
     * </pre>
     *
     * <code>optional uint32 scale = 3;</code>
     */
    int getScale();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScale}
   */
  public  static final class EChart_InvokeMapViewSetScale extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetScale, EChart_InvokeMapViewSetScale.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetScale)
      EChart_InvokeMapViewSetScaleOrBuilder {
    private EChart_InvokeMapViewSetScale() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE	
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int SCALE_FIELD_NUMBER = 3;
    private int scale_;
    /**
     * <pre>
     *比例尺
     * </pre>
     *
     * <code>optional uint32 scale = 3;</code>
     */
    public int getScale() {
      return scale_;
    }
    /**
     * <pre>
     *比例尺
     * </pre>
     *
     * <code>optional uint32 scale = 3;</code>
     */
    private void setScale(int value) {
      
      scale_ = value;
    }
    /**
     * <pre>
     *比例尺
     * </pre>
     *
     * <code>optional uint32 scale = 3;</code>
     */
    private void clearScale() {
      
      scale_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (scale_ != 0) {
        output.writeUInt32(3, scale_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (scale_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, scale_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScale}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetScale)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE	
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *比例尺
       * </pre>
       *
       * <code>optional uint32 scale = 3;</code>
       */
      public int getScale() {
        return instance.getScale();
      }
      /**
       * <pre>
       *比例尺
       * </pre>
       *
       * <code>optional uint32 scale = 3;</code>
       */
      public Builder setScale(int value) {
        copyOnWrite();
        instance.setScale(value);
        return this;
      }
      /**
       * <pre>
       *比例尺
       * </pre>
       *
       * <code>optional uint32 scale = 3;</code>
       */
      public Builder clearScale() {
        copyOnWrite();
        instance.clearScale();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetScale)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          scale_ = visitor.visitInt(scale_ != 0, scale_,
              other.scale_ != 0, other.scale_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  scale_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetScale)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetScale();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScale getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetScale> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetScale> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetScaleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetScale)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScale}
   */
  public  static final class EChart_ResultMapViewSetScale extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetScale, EChart_ResultMapViewSetScale.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetScale)
      EChart_ResultMapViewSetScaleOrBuilder {
    private EChart_ResultMapViewSetScale() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScale}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetScale)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetScale)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetScale)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetScale();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScale getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetScale> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetScale> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetScaleFactorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetScaleFactor)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *缩放倍率(&gt;1放大，&lt;1缩小)
     * </pre>
     *
     * <code>optional double factor = 3;</code>
     */
    double getFactor();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScaleFactor}
   */
  public  static final class EChart_InvokeMapViewSetScaleFactor extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetScaleFactor, EChart_InvokeMapViewSetScaleFactor.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetScaleFactor)
      EChart_InvokeMapViewSetScaleFactorOrBuilder {
    private EChart_InvokeMapViewSetScaleFactor() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int FACTOR_FIELD_NUMBER = 3;
    private double factor_;
    /**
     * <pre>
     *缩放倍率(&gt;1放大，&lt;1缩小)
     * </pre>
     *
     * <code>optional double factor = 3;</code>
     */
    public double getFactor() {
      return factor_;
    }
    /**
     * <pre>
     *缩放倍率(&gt;1放大，&lt;1缩小)
     * </pre>
     *
     * <code>optional double factor = 3;</code>
     */
    private void setFactor(double value) {
      
      factor_ = value;
    }
    /**
     * <pre>
     *缩放倍率(&gt;1放大，&lt;1缩小)
     * </pre>
     *
     * <code>optional double factor = 3;</code>
     */
    private void clearFactor() {
      
      factor_ = 0D;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (factor_ != 0D) {
        output.writeDouble(3, factor_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (factor_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, factor_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScaleFactor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetScaleFactor)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactorOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCALE_FACTOR
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *缩放倍率(&gt;1放大，&lt;1缩小)
       * </pre>
       *
       * <code>optional double factor = 3;</code>
       */
      public double getFactor() {
        return instance.getFactor();
      }
      /**
       * <pre>
       *缩放倍率(&gt;1放大，&lt;1缩小)
       * </pre>
       *
       * <code>optional double factor = 3;</code>
       */
      public Builder setFactor(double value) {
        copyOnWrite();
        instance.setFactor(value);
        return this;
      }
      /**
       * <pre>
       *缩放倍率(&gt;1放大，&lt;1缩小)
       * </pre>
       *
       * <code>optional double factor = 3;</code>
       */
      public Builder clearFactor() {
        copyOnWrite();
        instance.clearFactor();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetScaleFactor)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          factor_ = visitor.visitDouble(factor_ != 0D, factor_,
              other.factor_ != 0D, other.factor_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 25: {

                  factor_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetScaleFactor)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetScaleFactor();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScaleFactor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetScaleFactor> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetScaleFactor> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetScaleFactorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetScaleFactor)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScaleFactor}
   */
  public  static final class EChart_ResultMapViewSetScaleFactor extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetScaleFactor, EChart_ResultMapViewSetScaleFactor.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetScaleFactor)
      EChart_ResultMapViewSetScaleFactorOrBuilder {
    private EChart_ResultMapViewSetScaleFactor() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScaleFactor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetScaleFactor)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactorOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCALE_FACTOR		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetScaleFactor)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetScaleFactor)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetScaleFactor();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScaleFactor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetScaleFactor> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetScaleFactor> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetDpiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetDpi)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetDpi}
   */
  public  static final class EChart_InvokeMapViewGetDpi extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetDpi, EChart_InvokeMapViewGetDpi.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetDpi)
      EChart_InvokeMapViewGetDpiOrBuilder {
    private EChart_InvokeMapViewGetDpi() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetDpi}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetDpi)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpiOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetDpi)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetDpi)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetDpi();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetDpi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetDpi> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetDpi> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetDpiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetDpi)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 2;</code>
     */
    int getDpi();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetDpi}
   */
  public  static final class EChart_ResultMapViewGetDpi extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetDpi, EChart_ResultMapViewGetDpi.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetDpi)
      EChart_ResultMapViewGetDpiOrBuilder {
    private EChart_ResultMapViewGetDpi() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int DPI_FIELD_NUMBER = 2;
    private int dpi_;
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 2;</code>
     */
    public int getDpi() {
      return dpi_;
    }
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 2;</code>
     */
    private void setDpi(int value) {
      
      dpi_ = value;
    }
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 2;</code>
     */
    private void clearDpi() {
      
      dpi_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (dpi_ != 0) {
        output.writeUInt32(2, dpi_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (dpi_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, dpi_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetDpi}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetDpi)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpiOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 2;</code>
       */
      public int getDpi() {
        return instance.getDpi();
      }
      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 2;</code>
       */
      public Builder setDpi(int value) {
        copyOnWrite();
        instance.setDpi(value);
        return this;
      }
      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 2;</code>
       */
      public Builder clearDpi() {
        copyOnWrite();
        instance.clearDpi();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetDpi)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          dpi_ = visitor.visitInt(dpi_ != 0, dpi_,
              other.dpi_ != 0, other.dpi_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  dpi_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetDpi)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetDpi();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetDpi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetDpi> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetDpi> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetDpiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetDpi)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 3;</code>
     */
    int getDpi();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetDpi}
   */
  public  static final class EChart_InvokeMapViewSetDpi extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetDpi, EChart_InvokeMapViewSetDpi.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetDpi)
      EChart_InvokeMapViewSetDpiOrBuilder {
    private EChart_InvokeMapViewSetDpi() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_DPI
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int DPI_FIELD_NUMBER = 3;
    private int dpi_;
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 3;</code>
     */
    public int getDpi() {
      return dpi_;
    }
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 3;</code>
     */
    private void setDpi(int value) {
      
      dpi_ = value;
    }
    /**
     * <pre>
     *dpi
     * </pre>
     *
     * <code>optional uint32 dpi = 3;</code>
     */
    private void clearDpi() {
      
      dpi_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (dpi_ != 0) {
        output.writeUInt32(3, dpi_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (dpi_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, dpi_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetDpi}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetDpi)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpiOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_DPI
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 3;</code>
       */
      public int getDpi() {
        return instance.getDpi();
      }
      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 3;</code>
       */
      public Builder setDpi(int value) {
        copyOnWrite();
        instance.setDpi(value);
        return this;
      }
      /**
       * <pre>
       *dpi
       * </pre>
       *
       * <code>optional uint32 dpi = 3;</code>
       */
      public Builder clearDpi() {
        copyOnWrite();
        instance.clearDpi();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetDpi)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          dpi_ = visitor.visitInt(dpi_ != 0, dpi_,
              other.dpi_ != 0, other.dpi_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  dpi_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetDpi)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetDpi();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetDpi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetDpi> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetDpi> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetDpiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetDpi)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetDpi}
   */
  public  static final class EChart_ResultMapViewSetDpi extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetDpi, EChart_ResultMapViewSetDpi.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetDpi)
      EChart_ResultMapViewSetDpiOrBuilder {
    private EChart_ResultMapViewSetDpi() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_DPI		
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetDpi}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetDpi)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpiOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_DPI		
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetDpi)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetDpi)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetDpi();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetDpi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetDpi> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetDpi> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetScreenSizeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetScreenSize)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetScreenSize}
   */
  public  static final class EChart_InvokeMapViewGetScreenSize extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetScreenSize, EChart_InvokeMapViewGetScreenSize.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetScreenSize)
      EChart_InvokeMapViewGetScreenSizeOrBuilder {
    private EChart_InvokeMapViewGetScreenSize() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetScreenSize}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetScreenSize)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSizeOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetScreenSize)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetScreenSize)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetScreenSize();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetScreenSize getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetScreenSize> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetScreenSize> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetScreenSizeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetScreenSize)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 2;</code>
     */
    int getWidth();

    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 3;</code>
     */
    int getHeight();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetScreenSize}
   */
  public  static final class EChart_ResultMapViewGetScreenSize extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetScreenSize, EChart_ResultMapViewGetScreenSize.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetScreenSize)
      EChart_ResultMapViewGetScreenSizeOrBuilder {
    private EChart_ResultMapViewGetScreenSize() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ORIGIN	
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int WIDTH_FIELD_NUMBER = 2;
    private int width_;
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 2;</code>
     */
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 2;</code>
     */
    private void setWidth(int value) {
      
      width_ = value;
    }
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 2;</code>
     */
    private void clearWidth() {
      
      width_ = 0;
    }

    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 3;</code>
     */
    public int getHeight() {
      return height_;
    }
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 3;</code>
     */
    private void setHeight(int value) {
      
      height_ = value;
    }
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 3;</code>
     */
    private void clearHeight() {
      
      height_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (width_ != 0) {
        output.writeUInt32(2, width_);
      }
      if (height_ != 0) {
        output.writeUInt32(3, height_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (width_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, width_);
      }
      if (height_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, height_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetScreenSize}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetScreenSize)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSizeOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ORIGIN	
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 2;</code>
       */
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 2;</code>
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 2;</code>
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 3;</code>
       */
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 3;</code>
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 3;</code>
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetScreenSize)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          width_ = visitor.visitInt(width_ != 0, width_,
              other.width_ != 0, other.width_);
          height_ = visitor.visitInt(height_ != 0, height_,
              other.height_ != 0, other.height_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  width_ = input.readUInt32();
                  break;
                }
                case 24: {

                  height_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetScreenSize)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetScreenSize();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetScreenSize getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetScreenSize> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetScreenSize> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetScreenSizeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetScreenSize)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 3;</code>
     */
    int getWidth();

    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 4;</code>
     */
    int getHeight();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScreenSize}
   */
  public  static final class EChart_InvokeMapViewSetScreenSize extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetScreenSize, EChart_InvokeMapViewSetScreenSize.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetScreenSize)
      EChart_InvokeMapViewSetScreenSizeOrBuilder {
    private EChart_InvokeMapViewSetScreenSize() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 3;</code>
     */
    private void setWidth(int value) {
      
      width_ = value;
    }
    /**
     * <pre>
     *视图区域宽度
     * </pre>
     *
     * <code>optional uint32 width = 3;</code>
     */
    private void clearWidth() {
      
      width_ = 0;
    }

    public static final int HEIGHT_FIELD_NUMBER = 4;
    private int height_;
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 4;</code>
     */
    public int getHeight() {
      return height_;
    }
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 4;</code>
     */
    private void setHeight(int value) {
      
      height_ = value;
    }
    /**
     * <pre>
     *视图区域高度
     * </pre>
     *
     * <code>optional uint32 height = 4;</code>
     */
    private void clearHeight() {
      
      height_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (width_ != 0) {
        output.writeUInt32(3, width_);
      }
      if (height_ != 0) {
        output.writeUInt32(4, height_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (width_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, width_);
      }
      if (height_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, height_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetScreenSize}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetScreenSize)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSizeOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 3;</code>
       */
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       *视图区域宽度
       * </pre>
       *
       * <code>optional uint32 width = 3;</code>
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 4;</code>
       */
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 4;</code>
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       *视图区域高度
       * </pre>
       *
       * <code>optional uint32 height = 4;</code>
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetScreenSize)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          width_ = visitor.visitInt(width_ != 0, width_,
              other.width_ != 0, other.width_);
          height_ = visitor.visitInt(height_ != 0, height_,
              other.height_ != 0, other.height_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  width_ = input.readUInt32();
                  break;
                }
                case 32: {

                  height_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetScreenSize)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetScreenSize();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetScreenSize getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetScreenSize> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetScreenSize> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetScreenSizeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetScreenSize)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScreenSize}
   */
  public  static final class EChart_ResultMapViewSetScreenSize extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetScreenSize, EChart_ResultMapViewSetScreenSize.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetScreenSize)
      EChart_ResultMapViewSetScreenSizeOrBuilder {
    private EChart_ResultMapViewSetScreenSize() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetScreenSize}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetScreenSize)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSizeOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_SCREEN_SIZE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetScreenSize)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetScreenSize)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetScreenSize();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetScreenSize getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetScreenSize> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetScreenSize> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetCenterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetCenter)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *经度(东经&gt;0，西经&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float longitude = 3;</code>
     */
    float getLongitude();

    /**
     * <pre>
     *纬度(北纬&gt;0，南纬&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float latitude = 4;</code>
     */
    float getLatitude();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetCenter}
   */
  public  static final class EChart_InvokeMapViewSetCenter extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetCenter, EChart_InvokeMapViewSetCenter.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetCenter)
      EChart_InvokeMapViewSetCenterOrBuilder {
    private EChart_InvokeMapViewSetCenter() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private float longitude_;
    /**
     * <pre>
     *经度(东经&gt;0，西经&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float longitude = 3;</code>
     */
    public float getLongitude() {
      return longitude_;
    }
    /**
     * <pre>
     *经度(东经&gt;0，西经&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float longitude = 3;</code>
     */
    private void setLongitude(float value) {
      
      longitude_ = value;
    }
    /**
     * <pre>
     *经度(东经&gt;0，西经&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float longitude = 3;</code>
     */
    private void clearLongitude() {
      
      longitude_ = 0F;
    }

    public static final int LATITUDE_FIELD_NUMBER = 4;
    private float latitude_;
    /**
     * <pre>
     *纬度(北纬&gt;0，南纬&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float latitude = 4;</code>
     */
    public float getLatitude() {
      return latitude_;
    }
    /**
     * <pre>
     *纬度(北纬&gt;0，南纬&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float latitude = 4;</code>
     */
    private void setLatitude(float value) {
      
      latitude_ = value;
    }
    /**
     * <pre>
     *纬度(北纬&gt;0，南纬&lt;0)，单位：度
     * </pre>
     *
     * <code>optional float latitude = 4;</code>
     */
    private void clearLatitude() {
      
      latitude_ = 0F;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (longitude_ != 0F) {
        output.writeFloat(3, longitude_);
      }
      if (latitude_ != 0F) {
        output.writeFloat(4, latitude_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (longitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, longitude_);
      }
      if (latitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, latitude_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetCenter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetCenter)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenterOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *经度(东经&gt;0，西经&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float longitude = 3;</code>
       */
      public float getLongitude() {
        return instance.getLongitude();
      }
      /**
       * <pre>
       *经度(东经&gt;0，西经&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float longitude = 3;</code>
       */
      public Builder setLongitude(float value) {
        copyOnWrite();
        instance.setLongitude(value);
        return this;
      }
      /**
       * <pre>
       *经度(东经&gt;0，西经&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float longitude = 3;</code>
       */
      public Builder clearLongitude() {
        copyOnWrite();
        instance.clearLongitude();
        return this;
      }

      /**
       * <pre>
       *纬度(北纬&gt;0，南纬&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float latitude = 4;</code>
       */
      public float getLatitude() {
        return instance.getLatitude();
      }
      /**
       * <pre>
       *纬度(北纬&gt;0，南纬&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float latitude = 4;</code>
       */
      public Builder setLatitude(float value) {
        copyOnWrite();
        instance.setLatitude(value);
        return this;
      }
      /**
       * <pre>
       *纬度(北纬&gt;0，南纬&lt;0)，单位：度
       * </pre>
       *
       * <code>optional float latitude = 4;</code>
       */
      public Builder clearLatitude() {
        copyOnWrite();
        instance.clearLatitude();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetCenter)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          longitude_ = visitor.visitFloat(longitude_ != 0F, longitude_,
              other.longitude_ != 0F, other.longitude_);
          latitude_ = visitor.visitFloat(latitude_ != 0F, latitude_,
              other.latitude_ != 0F, other.latitude_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 29: {

                  longitude_ = input.readFloat();
                  break;
                }
                case 37: {

                  latitude_ = input.readFloat();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetCenter)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetCenter();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetCenter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetCenter> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetCenter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetCenterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetCenter)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetCenter}
   */
  public  static final class EChart_ResultMapViewSetCenter extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetCenter, EChart_ResultMapViewSetCenter.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetCenter)
      EChart_ResultMapViewSetCenterOrBuilder {
    private EChart_ResultMapViewSetCenter() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_CENTER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetCenter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetCenter)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenterOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_CENTER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetCenter)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetCenter)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetCenter();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetCenter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetCenter> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetCenter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetRotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetRotation)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetRotation}
   */
  public  static final class EChart_InvokeMapViewGetRotation extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetRotation, EChart_InvokeMapViewGetRotation.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetRotation)
      EChart_InvokeMapViewGetRotationOrBuilder {
    private EChart_InvokeMapViewGetRotation() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATIN
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetRotation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetRotation)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotationOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATIN
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetRotation)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetRotation)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetRotation();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetRotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetRotation> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetRotation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetRotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetRotation)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 2;</code>
     */
    int getDegree();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetRotation}
   */
  public  static final class EChart_ResultMapViewGetRotation extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetRotation, EChart_ResultMapViewGetRotation.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetRotation)
      EChart_ResultMapViewGetRotationOrBuilder {
    private EChart_ResultMapViewGetRotation() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int DEGREE_FIELD_NUMBER = 2;
    private int degree_;
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 2;</code>
     */
    public int getDegree() {
      return degree_;
    }
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 2;</code>
     */
    private void setDegree(int value) {
      
      degree_ = value;
    }
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 2;</code>
     */
    private void clearDegree() {
      
      degree_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (degree_ != 0) {
        output.writeUInt32(2, degree_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (degree_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, degree_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetRotation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetRotation)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotationOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 2;</code>
       */
      public int getDegree() {
        return instance.getDegree();
      }
      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 2;</code>
       */
      public Builder setDegree(int value) {
        copyOnWrite();
        instance.setDegree(value);
        return this;
      }
      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 2;</code>
       */
      public Builder clearDegree() {
        copyOnWrite();
        instance.clearDegree();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetRotation)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          degree_ = visitor.visitInt(degree_ != 0, degree_,
              other.degree_ != 0, other.degree_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  degree_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetRotation)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetRotation();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetRotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetRotation> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetRotation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewSetRotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewSetRotation)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 3;</code>
     */
    int getDegree();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetRotation}
   */
  public  static final class EChart_InvokeMapViewSetRotation extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewSetRotation, EChart_InvokeMapViewSetRotation.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewSetRotation)
      EChart_InvokeMapViewSetRotationOrBuilder {
    private EChart_InvokeMapViewSetRotation() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int DEGREE_FIELD_NUMBER = 3;
    private int degree_;
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 3;</code>
     */
    public int getDegree() {
      return degree_;
    }
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 3;</code>
     */
    private void setDegree(int value) {
      
      degree_ = value;
    }
    /**
     * <pre>
     *顺时针旋转的角度(单位：度)	
     * </pre>
     *
     * <code>optional uint32 degree = 3;</code>
     */
    private void clearDegree() {
      
      degree_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (degree_ != 0) {
        output.writeUInt32(3, degree_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (degree_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, degree_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewSetRotation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewSetRotation)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotationOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 3;</code>
       */
      public int getDegree() {
        return instance.getDegree();
      }
      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 3;</code>
       */
      public Builder setDegree(int value) {
        copyOnWrite();
        instance.setDegree(value);
        return this;
      }
      /**
       * <pre>
       *顺时针旋转的角度(单位：度)	
       * </pre>
       *
       * <code>optional uint32 degree = 3;</code>
       */
      public Builder clearDegree() {
        copyOnWrite();
        instance.clearDegree();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewSetRotation)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          degree_ = visitor.visitInt(degree_ != 0, degree_,
              other.degree_ != 0, other.degree_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  degree_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewSetRotation)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewSetRotation();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewSetRotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewSetRotation> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewSetRotation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewSetRotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewSetRotation)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetRotation}
   */
  public  static final class EChart_ResultMapViewSetRotation extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewSetRotation, EChart_ResultMapViewSetRotation.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewSetRotation)
      EChart_ResultMapViewSetRotationOrBuilder {
    private EChart_ResultMapViewSetRotation() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_SET_ROTATION
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewSetRotation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewSetRotation)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotationOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_SET_ROTATION
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewSetRotation)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewSetRotation)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewSetRotation();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewSetRotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewSetRotation> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewSetRotation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewMoveOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewMove)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
     * </pre>
     *
     * <code>optional int32 cx = 3;</code>
     */
    int getCx();

    /**
     * <pre>
     *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
     * </pre>
     *
     * <code>optional int32 cy = 4;</code>
     */
    int getCy();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewMove}
   */
  public  static final class EChart_InvokeMapViewMove extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewMove, EChart_InvokeMapViewMove.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewMove)
      EChart_InvokeMapViewMoveOrBuilder {
    private EChart_InvokeMapViewMove() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int CX_FIELD_NUMBER = 3;
    private int cx_;
    /**
     * <pre>
     *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
     * </pre>
     *
     * <code>optional int32 cx = 3;</code>
     */
    public int getCx() {
      return cx_;
    }
    /**
     * <pre>
     *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
     * </pre>
     *
     * <code>optional int32 cx = 3;</code>
     */
    private void setCx(int value) {
      
      cx_ = value;
    }
    /**
     * <pre>
     *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
     * </pre>
     *
     * <code>optional int32 cx = 3;</code>
     */
    private void clearCx() {
      
      cx_ = 0;
    }

    public static final int CY_FIELD_NUMBER = 4;
    private int cy_;
    /**
     * <pre>
     *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
     * </pre>
     *
     * <code>optional int32 cy = 4;</code>
     */
    public int getCy() {
      return cy_;
    }
    /**
     * <pre>
     *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
     * </pre>
     *
     * <code>optional int32 cy = 4;</code>
     */
    private void setCy(int value) {
      
      cy_ = value;
    }
    /**
     * <pre>
     *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
     * </pre>
     *
     * <code>optional int32 cy = 4;</code>
     */
    private void clearCy() {
      
      cy_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (cx_ != 0) {
        output.writeInt32(3, cx_);
      }
      if (cy_ != 0) {
        output.writeInt32(4, cy_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (cx_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cx_);
      }
      if (cy_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cy_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewMove}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewMove)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewMoveOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
       * </pre>
       *
       * <code>optional int32 cx = 3;</code>
       */
      public int getCx() {
        return instance.getCx();
      }
      /**
       * <pre>
       *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
       * </pre>
       *
       * <code>optional int32 cx = 3;</code>
       */
      public Builder setCx(int value) {
        copyOnWrite();
        instance.setCx(value);
        return this;
      }
      /**
       * <pre>
       *cx&gt;0为图幅向左移动,cx&lt;0为图幅向右移动
       * </pre>
       *
       * <code>optional int32 cx = 3;</code>
       */
      public Builder clearCx() {
        copyOnWrite();
        instance.clearCx();
        return this;
      }

      /**
       * <pre>
       *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
       * </pre>
       *
       * <code>optional int32 cy = 4;</code>
       */
      public int getCy() {
        return instance.getCy();
      }
      /**
       * <pre>
       *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
       * </pre>
       *
       * <code>optional int32 cy = 4;</code>
       */
      public Builder setCy(int value) {
        copyOnWrite();
        instance.setCy(value);
        return this;
      }
      /**
       * <pre>
       *cy&gt;0为图幅向上移动,cy&lt;0为图幅向下移动
       * </pre>
       *
       * <code>optional int32 cy = 4;</code>
       */
      public Builder clearCy() {
        copyOnWrite();
        instance.clearCy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewMove)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          cx_ = visitor.visitInt(cx_ != 0, cx_,
              other.cx_ != 0, other.cx_);
          cy_ = visitor.visitInt(cy_ != 0, cy_,
              other.cy_ != 0, other.cy_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  cx_ = input.readInt32();
                  break;
                }
                case 32: {

                  cy_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewMove)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewMove();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewMove getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewMove> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewMove> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewMoveOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewMove)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewMove}
   */
  public  static final class EChart_ResultMapViewMove extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewMove, EChart_ResultMapViewMove.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewMove)
      EChart_ResultMapViewMoveOrBuilder {
    private EChart_ResultMapViewMove() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_MOVE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewMove prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewMove}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewMove, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewMove)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewMoveOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewMove.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_MOVE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewMove)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewMove();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewMove other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewMove) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewMove.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewMove)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewMove DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewMove();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewMove getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewMove> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewMove> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdate}
   */
  public  static final class EChart_InvokeMapViewUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewUpdate, EChart_InvokeMapViewUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewUpdate)
      EChart_InvokeMapViewUpdateOrBuilder {
    private EChart_InvokeMapViewUpdate() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewUpdate)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewUpdate)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewUpdate> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *绘图上下文id
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    int getContextId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdate}
   */
  public  static final class EChart_ResultMapViewUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewUpdate, EChart_ResultMapViewUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewUpdate)
      EChart_ResultMapViewUpdateOrBuilder {
    private EChart_ResultMapViewUpdate() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int CONTEXT_ID_FIELD_NUMBER = 2;
    private int contextId_;
    /**
     * <pre>
     *绘图上下文id
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    public int getContextId() {
      return contextId_;
    }
    /**
     * <pre>
     *绘图上下文id
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void setContextId(int value) {
      
      contextId_ = value;
    }
    /**
     * <pre>
     *绘图上下文id
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void clearContextId() {
      
      contextId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (contextId_ != 0) {
        output.writeUInt32(2, contextId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (contextId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, contextId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewUpdate)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *绘图上下文id
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public int getContextId() {
        return instance.getContextId();
      }
      /**
       * <pre>
       *绘图上下文id
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder setContextId(int value) {
        copyOnWrite();
        instance.setContextId(value);
        return this;
      }
      /**
       * <pre>
       *绘图上下文id
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder clearContextId() {
        copyOnWrite();
        instance.clearContextId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          contextId_ = visitor.visitInt(contextId_ != 0, contextId_,
              other.contextId_ != 0, other.contextId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  contextId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewUpdate)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewUpdate> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetBaseMapLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetBaseMapLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetBaseMapLayer}
   */
  public  static final class EChart_InvokeMapViewGetBaseMapLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetBaseMapLayer, EChart_InvokeMapViewGetBaseMapLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetBaseMapLayer)
      EChart_InvokeMapViewGetBaseMapLayerOrBuilder {
    private EChart_InvokeMapViewGetBaseMapLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetBaseMapLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetBaseMapLayer)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetBaseMapLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetBaseMapLayer)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetBaseMapLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetBaseMapLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetBaseMapLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetBaseMapLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetBaseMapLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetBaseMapLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *海图图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    int getLayerId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetBaseMapLayer}
   */
  public  static final class EChart_ResultMapViewGetBaseMapLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetBaseMapLayer, EChart_ResultMapViewGetBaseMapLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetBaseMapLayer)
      EChart_ResultMapViewGetBaseMapLayerOrBuilder {
    private EChart_ResultMapViewGetBaseMapLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int LAYER_ID_FIELD_NUMBER = 2;
    private int layerId_;
    /**
     * <pre>
     *海图图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    public int getLayerId() {
      return layerId_;
    }
    /**
     * <pre>
     *海图图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void setLayerId(int value) {
      
      layerId_ = value;
    }
    /**
     * <pre>
     *海图图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void clearLayerId() {
      
      layerId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (layerId_ != 0) {
        output.writeUInt32(2, layerId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (layerId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, layerId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetBaseMapLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetBaseMapLayer)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_BASEMAP_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *海图图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public int getLayerId() {
        return instance.getLayerId();
      }
      /**
       * <pre>
       *海图图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder setLayerId(int value) {
        copyOnWrite();
        instance.setLayerId(value);
        return this;
      }
      /**
       * <pre>
       *海图图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder clearLayerId() {
        copyOnWrite();
        instance.clearLayerId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetBaseMapLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          layerId_ = visitor.visitInt(layerId_ != 0, layerId_,
              other.layerId_ != 0, other.layerId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  layerId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetBaseMapLayer)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetBaseMapLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetBaseMapLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetBaseMapLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetBaseMapLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetVesselLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetVesselLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetVesselLayer}
   */
  public  static final class EChart_InvokeMapViewGetVesselLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetVesselLayer, EChart_InvokeMapViewGetVesselLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetVesselLayer)
      EChart_InvokeMapViewGetVesselLayerOrBuilder {
    private EChart_InvokeMapViewGetVesselLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetVesselLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetVesselLayer)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetVesselLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetVesselLayer)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetVesselLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetVesselLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetVesselLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetVesselLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetVesselLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetVesselLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *动态船舶图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    int getLayerId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetVesselLayer}
   */
  public  static final class EChart_ResultMapViewGetVesselLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetVesselLayer, EChart_ResultMapViewGetVesselLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetVesselLayer)
      EChart_ResultMapViewGetVesselLayerOrBuilder {
    private EChart_ResultMapViewGetVesselLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int LAYER_ID_FIELD_NUMBER = 2;
    private int layerId_;
    /**
     * <pre>
     *动态船舶图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    public int getLayerId() {
      return layerId_;
    }
    /**
     * <pre>
     *动态船舶图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void setLayerId(int value) {
      
      layerId_ = value;
    }
    /**
     * <pre>
     *动态船舶图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void clearLayerId() {
      
      layerId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (layerId_ != 0) {
        output.writeUInt32(2, layerId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (layerId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, layerId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetVesselLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetVesselLayer)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESTULT_MAPVIEW_GET_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *动态船舶图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public int getLayerId() {
        return instance.getLayerId();
      }
      /**
       * <pre>
       *动态船舶图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder setLayerId(int value) {
        copyOnWrite();
        instance.setLayerId(value);
        return this;
      }
      /**
       * <pre>
       *动态船舶图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder clearLayerId() {
        copyOnWrite();
        instance.clearLayerId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetVesselLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          layerId_ = visitor.visitInt(layerId_ != 0, layerId_,
              other.layerId_ != 0, other.layerId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  layerId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetVesselLayer)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetVesselLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetVesselLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetVesselLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetVesselLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewGetPersistableLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewGetPersistableLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetPersistableLayer}
   */
  public  static final class EChart_InvokeMapViewGetPersistableLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewGetPersistableLayer, EChart_InvokeMapViewGetPersistableLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewGetPersistableLayer)
      EChart_InvokeMapViewGetPersistableLayerOrBuilder {
    private EChart_InvokeMapViewGetPersistableLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewGetPersistableLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewGetPersistableLayer)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewGetPersistableLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewGetPersistableLayer)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewGetPersistableLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewGetPersistableLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewGetPersistableLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewGetPersistableLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewGetPersistableLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewGetPersistableLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *可持久化(即自定义)图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    int getLayerId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetPersistableLayer}
   */
  public  static final class EChart_ResultMapViewGetPersistableLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewGetPersistableLayer, EChart_ResultMapViewGetPersistableLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewGetPersistableLayer)
      EChart_ResultMapViewGetPersistableLayerOrBuilder {
    private EChart_ResultMapViewGetPersistableLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int LAYER_ID_FIELD_NUMBER = 2;
    private int layerId_;
    /**
     * <pre>
     *可持久化(即自定义)图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    public int getLayerId() {
      return layerId_;
    }
    /**
     * <pre>
     *可持久化(即自定义)图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void setLayerId(int value) {
      
      layerId_ = value;
    }
    /**
     * <pre>
     *可持久化(即自定义)图层的id
     * </pre>
     *
     * <code>optional uint32 layer_id = 2;</code>
     */
    private void clearLayerId() {
      
      layerId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (layerId_ != 0) {
        output.writeUInt32(2, layerId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (layerId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, layerId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewGetPersistableLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewGetPersistableLayer)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_GET_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *可持久化(即自定义)图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public int getLayerId() {
        return instance.getLayerId();
      }
      /**
       * <pre>
       *可持久化(即自定义)图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder setLayerId(int value) {
        copyOnWrite();
        instance.setLayerId(value);
        return this;
      }
      /**
       * <pre>
       *可持久化(即自定义)图层的id
       * </pre>
       *
       * <code>optional uint32 layer_id = 2;</code>
       */
      public Builder clearLayerId() {
        copyOnWrite();
        instance.clearLayerId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewGetPersistableLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          layerId_ = visitor.visitInt(layerId_ != 0, layerId_,
              other.layerId_ != 0, other.layerId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  layerId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewGetPersistableLayer)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewGetPersistableLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewGetPersistableLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewGetPersistableLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewGetPersistableLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewUpdateVesselLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewUpdateVesselLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdateVesselLayer}
   */
  public  static final class EChart_InvokeMapViewUpdateVesselLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewUpdateVesselLayer, EChart_InvokeMapViewUpdateVesselLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewUpdateVesselLayer)
      EChart_InvokeMapViewUpdateVesselLayerOrBuilder {
    private EChart_InvokeMapViewUpdateVesselLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdateVesselLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewUpdateVesselLayer)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewUpdateVesselLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewUpdateVesselLayer)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewUpdateVesselLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdateVesselLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewUpdateVesselLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewUpdateVesselLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewUpdateVesselLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewUpdateVesselLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *绘图上下文id	
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    int getContextId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdateVesselLayer}
   */
  public  static final class EChart_ResultMapViewUpdateVesselLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewUpdateVesselLayer, EChart_ResultMapViewUpdateVesselLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewUpdateVesselLayer)
      EChart_ResultMapViewUpdateVesselLayerOrBuilder {
    private EChart_ResultMapViewUpdateVesselLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int CONTEXT_ID_FIELD_NUMBER = 2;
    private int contextId_;
    /**
     * <pre>
     *绘图上下文id	
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    public int getContextId() {
      return contextId_;
    }
    /**
     * <pre>
     *绘图上下文id	
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void setContextId(int value) {
      
      contextId_ = value;
    }
    /**
     * <pre>
     *绘图上下文id	
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void clearContextId() {
      
      contextId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (contextId_ != 0) {
        output.writeUInt32(2, contextId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (contextId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, contextId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdateVesselLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewUpdateVesselLayer)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_VESSEL_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *绘图上下文id	
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public int getContextId() {
        return instance.getContextId();
      }
      /**
       * <pre>
       *绘图上下文id	
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder setContextId(int value) {
        copyOnWrite();
        instance.setContextId(value);
        return this;
      }
      /**
       * <pre>
       *绘图上下文id	
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder clearContextId() {
        copyOnWrite();
        instance.clearContextId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewUpdateVesselLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          contextId_ = visitor.visitInt(contextId_ != 0, contextId_,
              other.contextId_ != 0, other.contextId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  contextId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewUpdateVesselLayer)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewUpdateVesselLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdateVesselLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewUpdateVesselLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewUpdateVesselLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewUpdatePersistableLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer}
   */
  public  static final class EChart_InvokeMapViewUpdatePersistableLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewUpdatePersistableLayer, EChart_InvokeMapViewUpdatePersistableLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer)
      EChart_InvokeMapViewUpdatePersistableLayerOrBuilder {
    private EChart_InvokeMapViewUpdatePersistableLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewUpdatePersistableLayer)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewUpdatePersistableLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewUpdatePersistableLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewUpdatePersistableLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewUpdatePersistableLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewUpdatePersistableLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewUpdatePersistableLayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();

    /**
     * <pre>
     *绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    int getContextId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdatePersistableLayer}
   */
  public  static final class EChart_ResultMapViewUpdatePersistableLayer extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewUpdatePersistableLayer, EChart_ResultMapViewUpdatePersistableLayer.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewUpdatePersistableLayer)
      EChart_ResultMapViewUpdatePersistableLayerOrBuilder {
    private EChart_ResultMapViewUpdatePersistableLayer() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int CONTEXT_ID_FIELD_NUMBER = 2;
    private int contextId_;
    /**
     * <pre>
     *绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    public int getContextId() {
      return contextId_;
    }
    /**
     * <pre>
     *绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void setContextId(int value) {
      
      contextId_ = value;
    }
    /**
     * <pre>
     *绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 2;</code>
     */
    private void clearContextId() {
      
      contextId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (contextId_ != 0) {
        output.writeUInt32(2, contextId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (contextId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, contextId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewUpdatePersistableLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewUpdatePersistableLayer)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayerOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_UPDATE_PERSISTABLE_LAYER
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public int getContextId() {
        return instance.getContextId();
      }
      /**
       * <pre>
       *绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder setContextId(int value) {
        copyOnWrite();
        instance.setContextId(value);
        return this;
      }
      /**
       * <pre>
       *绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 2;</code>
       */
      public Builder clearContextId() {
        copyOnWrite();
        instance.clearContextId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewUpdatePersistableLayer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          contextId_ = visitor.visitInt(contextId_ != 0, contextId_,
              other.contextId_ != 0, other.contextId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  contextId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewUpdatePersistableLayer)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewUpdatePersistableLayer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewUpdatePersistableLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewUpdatePersistableLayer> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewUpdatePersistableLayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_InvokeMapViewDrawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_InvokeMapViewDraw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_InvokeHeader getHdr();

    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    int getMapviewId();

    /**
     * <pre>
     *从各种update返回的绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 3;</code>
     */
    int getContextId();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_InvokeMapViewDraw}
   */
  public  static final class EChart_InvokeMapViewDraw extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_InvokeMapViewDraw, EChart_InvokeMapViewDraw.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_InvokeMapViewDraw)
      EChart_InvokeMapViewDrawOrBuilder {
    private EChart_InvokeMapViewDraw() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_InvokeHeader hdr_;
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_InvokeHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_InvokeHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_INVOKE_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public static final int MAPVIEW_ID_FIELD_NUMBER = 2;
    private int mapviewId_;
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    public int getMapviewId() {
      return mapviewId_;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void setMapviewId(int value) {
      
      mapviewId_ = value;
    }
    /**
     * <pre>
     *创建的MapView的id		
     * </pre>
     *
     * <code>optional uint32 mapview_id = 2;</code>
     */
    private void clearMapviewId() {
      
      mapviewId_ = 0;
    }

    public static final int CONTEXT_ID_FIELD_NUMBER = 3;
    private int contextId_;
    /**
     * <pre>
     *从各种update返回的绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 3;</code>
     */
    public int getContextId() {
      return contextId_;
    }
    /**
     * <pre>
     *从各种update返回的绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 3;</code>
     */
    private void setContextId(int value) {
      
      contextId_ = value;
    }
    /**
     * <pre>
     *从各种update返回的绘图上下文id		
     * </pre>
     *
     * <code>optional uint32 context_id = 3;</code>
     */
    private void clearContextId() {
      
      contextId_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
      if (mapviewId_ != 0) {
        output.writeUInt32(2, mapviewId_);
      }
      if (contextId_ != 0) {
        output.writeUInt32(3, contextId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      if (mapviewId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mapviewId_);
      }
      if (contextId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, contextId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_InvokeMapViewDraw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_InvokeMapViewDraw)
        com.ndk.echart.EchartMapview.EChart_InvokeMapViewDrawOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_InvokeHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_InvokeHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_InvokeHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_INVOKE_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_InvokeHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public int getMapviewId() {
        return instance.getMapviewId();
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder setMapviewId(int value) {
        copyOnWrite();
        instance.setMapviewId(value);
        return this;
      }
      /**
       * <pre>
       *创建的MapView的id		
       * </pre>
       *
       * <code>optional uint32 mapview_id = 2;</code>
       */
      public Builder clearMapviewId() {
        copyOnWrite();
        instance.clearMapviewId();
        return this;
      }

      /**
       * <pre>
       *从各种update返回的绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 3;</code>
       */
      public int getContextId() {
        return instance.getContextId();
      }
      /**
       * <pre>
       *从各种update返回的绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 3;</code>
       */
      public Builder setContextId(int value) {
        copyOnWrite();
        instance.setContextId(value);
        return this;
      }
      /**
       * <pre>
       *从各种update返回的绘图上下文id		
       * </pre>
       *
       * <code>optional uint32 context_id = 3;</code>
       */
      public Builder clearContextId() {
        copyOnWrite();
        instance.clearContextId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_InvokeMapViewDraw)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw other = (com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          mapviewId_ = visitor.visitInt(mapviewId_ != 0, mapviewId_,
              other.mapviewId_ != 0, other.mapviewId_);
          contextId_ = visitor.visitInt(contextId_ != 0, contextId_,
              other.contextId_ != 0, other.contextId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_InvokeHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_InvokeHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  mapviewId_ = input.readUInt32();
                  break;
                }
                case 24: {

                  contextId_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_InvokeMapViewDraw)
    private static final com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_InvokeMapViewDraw();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_InvokeMapViewDraw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_InvokeMapViewDraw> PARSER;

    public static com.google.protobuf.Parser<EChart_InvokeMapViewDraw> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EChart_ResultMapViewDrawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:echart.mapview.EChart_ResultMapViewDraw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    boolean hasHdr();
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    com.ndk.echart.Echart.EChart_ResultHeader getHdr();
  }
  /**
   * Protobuf type {@code echart.mapview.EChart_ResultMapViewDraw}
   */
  public  static final class EChart_ResultMapViewDraw extends
      com.google.protobuf.GeneratedMessageLite<
          EChart_ResultMapViewDraw, EChart_ResultMapViewDraw.Builder> implements
      // @@protoc_insertion_point(message_implements:echart.mapview.EChart_ResultMapViewDraw)
      EChart_ResultMapViewDrawOrBuilder {
    private EChart_ResultMapViewDraw() {
    }
    public static final int HDR_FIELD_NUMBER = 1;
    private com.ndk.echart.Echart.EChart_ResultHeader hdr_;
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public boolean hasHdr() {
      return hdr_ != null;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
      return hdr_ == null ? com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance() : hdr_;
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hdr_ = value;
      
      }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void setHdr(
        com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
      hdr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
      if (hdr_ != null &&
          hdr_ != com.ndk.echart.Echart.EChart_ResultHeader.getDefaultInstance()) {
        hdr_ =
          com.ndk.echart.Echart.EChart_ResultHeader.newBuilder(hdr_).mergeFrom(value).buildPartial();
      } else {
        hdr_ = value;
      }
      
    }
    /**
     * <pre>
     *MSG_RESULT_MAPVIEW_DRAW
     * </pre>
     *
     * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
     */
    private void clearHdr() {  hdr_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hdr_ != null) {
        output.writeMessage(1, getHdr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hdr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHdr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code echart.mapview.EChart_ResultMapViewDraw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw, Builder> implements
        // @@protoc_insertion_point(builder_implements:echart.mapview.EChart_ResultMapViewDraw)
        com.ndk.echart.EchartMapview.EChart_ResultMapViewDrawOrBuilder {
      // Construct using com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public boolean hasHdr() {
        return instance.hasHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public com.ndk.echart.Echart.EChart_ResultHeader getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
        }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder setHdr(
          com.ndk.echart.Echart.EChart_ResultHeader.Builder builderForValue) {
        copyOnWrite();
        instance.setHdr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder mergeHdr(com.ndk.echart.Echart.EChart_ResultHeader value) {
        copyOnWrite();
        instance.mergeHdr(value);
        return this;
      }
      /**
       * <pre>
       *MSG_RESULT_MAPVIEW_DRAW
       * </pre>
       *
       * <code>optional .echart.EChart_ResultHeader hdr = 1;</code>
       */
      public Builder clearHdr() {  copyOnWrite();
        instance.clearHdr();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:echart.mapview.EChart_ResultMapViewDraw)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw other = (com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw) arg1;
          hdr_ = visitor.visitMessage(hdr_, other.hdr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.ndk.echart.Echart.EChart_ResultHeader.Builder subBuilder = null;
                  if (hdr_ != null) {
                    subBuilder = hdr_.toBuilder();
                  }
                  hdr_ = input.readMessage(com.ndk.echart.Echart.EChart_ResultHeader.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hdr_);
                    hdr_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:echart.mapview.EChart_ResultMapViewDraw)
    private static final com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EChart_ResultMapViewDraw();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.ndk.echart.EchartMapview.EChart_ResultMapViewDraw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EChart_ResultMapViewDraw> PARSER;

    public static com.google.protobuf.Parser<EChart_ResultMapViewDraw> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
